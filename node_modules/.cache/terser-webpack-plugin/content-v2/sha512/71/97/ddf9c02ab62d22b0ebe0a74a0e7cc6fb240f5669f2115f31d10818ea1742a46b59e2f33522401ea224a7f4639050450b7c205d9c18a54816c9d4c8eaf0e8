{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{362:function(t,a,s){\"use strict\";s.r(a);var v=s(33),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"了解http\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#了解http\"}},[t._v(\"#\")]),t._v(\" 了解HTTP\")]),t._v(\" \"),s(\"p\",[t._v(\"学习内容全部来自《图解HTTP》。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"了解web以及网络基础\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#了解web以及网络基础\"}},[t._v(\"#\")]),t._v(\" 了解web以及网络基础\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"使用-http-协议访问-web\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用-http-协议访问-web\"}},[t._v(\"#\")]),t._v(\" 使用 \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 协议访问 \"),s(\"strong\",[t._v(\"Web\")])]),t._v(\" \"),s(\"p\",[t._v(\"你知道当我们在网页浏览器(Web browser)的地址栏中输入 URL时，Web 页面是如何呈现的吗?\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-333c42f467d96b76138427ba5756a976_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"Web 页面当然不能凭空显示出来。根据 Web 浏览器地址栏中指定的 URL，Web 浏览器从 Web 服务器端获取文件资源(resource)等信 息，从而显示出 Web 页面。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-e31127a2c02b9d92bc34565bb0b9cb80_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"Web 使用一种名为 HTTP(HyperText Transfer Protocol，超文本传输协\")]),t._v(\" \"),s(\"p\",[t._v(\"议 1)的协议作为规范，完成从客户端到服务器端等一系列运作流 程。而协议是指规则的约定。可以说，Web 是建立在 HTTP 协议上通 信的。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-的诞生\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-的诞生\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 的诞生\")]),t._v(\" \"),s(\"p\",[t._v(\"在深入学习 HTTP 之前，我们先来介绍一下 HTTP 诞生的背景。了解 背景的同时也能了解当初制定 HTTP 的初衷，这样有助于我们更好地 理解。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"为知识共享而规划-web\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为知识共享而规划-web\"}},[t._v(\"#\")]),t._v(\" 为知识共享而规划 Web\")]),t._v(\" \"),s(\"p\",[t._v(\"1989 年 3 月，互联网还只属于少数人。在这一互联网的黎明期，HTTP 诞生了。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-d5110299fd22098c6b463bf0b96553cf_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"CERN(欧洲核子研究组织)的蒂姆 • 伯纳斯 - 李(Tim BernersLee) 博士提出了一种能让远隔两地的研究者们共享知识的设想。\")]),t._v(\" \"),s(\"p\",[t._v(\"最初设想的基本理念是:借助多文档之间相互关联形成的超文本 (HyperText)，连成可相互参阅的 WWW(World Wide Web，万维 网)。\")]),t._v(\" \"),s(\"p\",[t._v(\"现在已提出了 3 项 WWW 构建技术，分别是:把 SGML(Standard Generalized Markup Language，标准通用标记语言)作为页面的文本标 记语言的 HTML(HyperText Markup Language，超文本标记语言); 作为文档传递协议的 HTTP ;指定文档所在地址的 URL(UniformResource Locator，统一资源定位符)。\")]),t._v(\" \"),s(\"p\",[t._v(\"WWW 这一名称，是 Web 浏览器当年用来浏览超文本的客户端应用程序时的名称。现在则用来表示这一系列的集合，也可简称为 Web。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"驻足不前的-http\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#驻足不前的-http\"}},[t._v(\"#\")]),t._v(\" 驻足不前的  HTTP\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"HTTP/0.9\")])]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 于 1990 年问世。那时的 HTTP 并没有作为正式的标准被建立。 现在的 HTTP 其实含有 HTTP1.0 之前版本的意思，因此被称为 HTTP/0.9。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"HTTP/1.0\")])]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 正式作为标准被公布是在 1996 年的 5 月，版本被命名为 HTTP/1.0，并记载于 RFC1945。虽说是初期标准，但该协议标准至今 仍被广泛使用在服务器端。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"HTTP/1.1\")])]),t._v(\" \"),s(\"p\",[t._v(\"1997 年 1 月公布的 HTTP/1.1 是目前主流的 HTTP 协议版本。当初的 标准是 RFC2068，之后发布的修订版 RFC2616 就是当前的最新版 本。\")]),t._v(\" \"),s(\"p\",[t._v(\"可见，作为 Web 文档传输协议的 HTTP，它的版本几乎没有更新。新 一代 HTTP/2.0 正在制订中，但要达到较高的使用覆盖率，仍需假以 时日。\")]),t._v(\" \"),s(\"p\",[t._v(\"当年 HTTP 协议的出现主要是为了解决文本传输的难题。由于协议本 身非常简单，于是在此基础上设想了很多应用方法并投入了实际使 用。现在 HTTP 协议已经超出了 Web 这个框架的局限，被运用到了 各种场景里。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"网络基础-tcp-ip\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网络基础-tcp-ip\"}},[t._v(\"#\")]),t._v(\" 网络基础 TCP/IP\")]),t._v(\" \"),s(\"p\",[t._v(\"为了理解 HTTP，我们有必要事先了解一下 TCP/IP 协议族。\")]),t._v(\" \"),s(\"p\",[t._v(\"通常使用的网络(包括互联网)是在 TCP/IP 协议族的基础上运作 的。而 HTTP 属于它内部的一个子集。\")]),t._v(\" \"),s(\"p\",[t._v(\"接下来，我们仅介绍理解 HTTP 所需掌握的 TCP/IP 协议族的概要。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"tcp-ip-协议族\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-ip-协议族\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"TCP/IP\")]),t._v(\" 协议族\")]),t._v(\" \"),s(\"p\",[t._v(\"计算机与网络设备要相互通信，双方就必须基于相同的方法。比如， 如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通 信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之 间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为 协议(protocol)。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-ceedc4fa404f250e36ec4fa432f48077_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为 \"),s(\"strong\",[t._v(\"TCP/IP\")]),t._v(\" 是互联网相关的各类协议族的总称\")])]),t._v(\" \"),s(\"p\",[t._v(\"协议中存在各式各样的内容。从电缆的规格到 IP 地址的选定方法、 寻找异地用户的方法、双方建立通信的顺序，以及 Web 页面显示需 要处理的步骤，等等。\")]),t._v(\" \"),s(\"p\",[t._v(\"像这样把与互联网相关联的协议集合起来总称为 TCP/IP。也有说法 认为，TCP/IP 是指 TCP 和 IP 这两种协议。还有一种说法认为，TCP/ IP 是在 IP 协议的通信过程中，使用到的协议族的统称。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"tcp-ip-的分层管理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-ip-的分层管理\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"TCP/IP\")]),t._v(\" 的分层管理\")]),t._v(\" \"),s(\"p\",[t._v(\"TCP/IP 协议族里重要的一点就是分层。TCP/IP 协议族按层次分别分\")]),t._v(\" \"),s(\"p\",[t._v(\"为以下 4 层:应用层、传输层、网络层和数据链路层。\")]),t._v(\" \"),s(\"p\",[t._v(\"把 TCP/IP 层次化是有好处的。比如，如果互联网只由一个协议统 筹，某个地方需要改变设计时，就必须把所有部分整体替换掉。而分 层之后只需把变动的层替换掉即可。把各层之间的接口部分规划好之 后，每个层次内部的设计就能够自由改动了。\")]),t._v(\" \"),s(\"p\",[t._v(\"值得一提的是，层次化之后，设计也变得相对简单了。处于应用层上 的应用可以只考虑分派给自己的任务，而不需要弄清对方在地球上哪 个地方、对方的传输路线是怎样的、是否能确保传输送达等问题。\")]),t._v(\" \"),s(\"p\",[t._v(\"TCP/IP 协议族各层的作用如下。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"应用层\")]),t._v(\"：应用层决定了向用户提供应用服务时通信的活动。TCP/IP 协议族内预存了各类通用的应用服务。比如，FTP(File Transfer Protocol，文件传输协议)和 DNS(Domain Name System，域 名系统)服务就是其中两类。HTTP 协议也处于该层。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"传输层\")]),t._v(\"：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据 传输。在传输层有两个性质不同的议:TCP(Transmission Control Protocol，传输控制协议)和 UDP(User Data Protocol，用户数据报 协议)。\")]),t._v(\" \"),s(\"li\",[t._v(\"**网络层：**网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数 据单位。该层规定了通过怎样的路径(所谓的传输路线)到达对方计 算机，并把数据包传送给对方。与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所 起的作用就是在众多的选项内选择一条传输路\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"链路层\")]),t._v(\"(又名数据链路层，网络接口层)：用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱 动、NIC(Network Interface Card，网络适配器，即网卡)，及光纤等 物理可见部分(还包括连接器等一切传输媒介)。硬件上的范畴均在 链路层的作用范围之内。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"tcp-ip-通信传输流\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-ip-通信传输流\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"TCP/IP\")]),t._v(\" 通信传输流\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-3240d9089fd4b6af55f75112f4d26c76_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"利用 TCP/IP 协议族进行网络通信时，会通过分层顺序与对方进行通 信。发送端从应用层往下走，接收端则往应用层往上走。\")]),t._v(\" \"),s(\"p\",[t._v(\"我们用 HTTP 举例来说明，首先作为发送端的客户端在应用层 (HTTP 协议)发出一个想看某个 Web 页面的 HTTP 请求。\")]),t._v(\" \"),s(\"p\",[t._v(\"接着，为了传输方便，在传输层(TCP 协议)把从应用层处收到的数 据(HTTP 请求报文)进行分割，并在各个报文上打上标记序号及端 口号后转发给网络层。\")]),t._v(\" \"),s(\"p\",[t._v(\"在网络层(IP 协议)，增加作为通信目的地的 MAC 地址后转发给链 路层。这样一来，发往网络的通信请求就准备齐全了。\")]),t._v(\" \"),s(\"p\",[t._v(\"接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用 层。当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP 请求。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-32637fe0424992588d519362caa20de3_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该 层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层 时会把对应的首部消去。\")]),t._v(\" \"),s(\"p\",[t._v(\"这种把数据信息包装起来的做法称为封装(encapsulate)。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"与-http-关系密切的协议-ip、tcp-和dns\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#与-http-关系密切的协议-ip、tcp-和dns\"}},[t._v(\"#\")]),t._v(\" 与 \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 关系密切的协议 \"),s(\"strong\",[t._v(\": IP\")]),t._v(\"、\"),s(\"strong\",[t._v(\"TCP\")]),t._v(\" 和DNS\")]),t._v(\" \"),s(\"p\",[t._v(\"下面我们分别针对在 TCP/IP 协议族中与 HTTP 密不可分的 3 个协议 (IP、TCP 和 DNS)进行说明。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"负责传输的-ip-协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#负责传输的-ip-协议\"}},[t._v(\"#\")]),t._v(\" 负责传输的 \"),s(\"strong\",[t._v(\"IP\")]),t._v(\" 协议\")]),t._v(\" \"),s(\"p\",[t._v(\"按层次分，IP(Internet Protocol)网际协议位于网络层。Internet Protocol 这个名称可能听起来有点夸张，但事实正是如此，因为几乎 所有使用网络的系统都会用到 IP 协议。TCP/IP 协议族中的 IP 指的就 是网际协议，协议名称中占据了一半位置，其重要性可见一斑。可能 有人会把“IP”和“IP 地址”搞混，“IP”其实是一种协议的名称。\")]),t._v(\" \"),s(\"p\",[t._v(\"IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方 那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC 地址(Media Access Control Address)。\")]),t._v(\" \"),s(\"p\",[t._v(\"IP 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定 地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC 地址基本上不会更改。\")]),t._v(\" \"),s(\"p\",[t._v(\"使用 \"),s(\"strong\",[t._v(\"ARP\")]),t._v(\" 协议凭借 \"),s(\"strong\",[t._v(\"MAC\")]),t._v(\" 地址进行通信\")]),t._v(\" \"),s(\"p\",[t._v(\"IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网 (LAN)内的情况是很少的，通常是经过多台计算机和网络设备中转 才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 ARP 协议(Address Resolution Protocol)。ARP 是一种用以解析地址的协议，根据通信方 的 IP 地址就可以反查出对应的 MAC 地址。\")]),t._v(\" \"),s(\"p\",[t._v(\"没有人能够全面掌握互联网中的传输状况\")]),t._v(\" \"),s(\"p\",[t._v(\"在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只 能获悉很粗略的传输路线。\")]),t._v(\" \"),s(\"p\",[t._v(\"这种机制称为路由选择(routing)，有点像快递公司的送货过程。想 要寄快递的人，只要将自己的货物送到集散中心，就可以知道快递公 司是否肯收件发货，该快递公司的集散中心检查货物的送达地址，明 确下站该送往哪个区域的集散中心。接着，那个区域的集散中心自会 判断是否能送到对方的家中。\")]),t._v(\" \"),s(\"p\",[t._v(\"我们是想通过这个比喻说明，无论哪台计算机、哪台网络设备，它们 都无法全面掌握互联网中的细节。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-2cd84d4ea9000be7aec9369fa3cb4dff_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"h4\",{attrs:{id:\"确保可靠性的-tcp-协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#确保可靠性的-tcp-协议\"}},[t._v(\"#\")]),t._v(\" 确保可靠性的 \"),s(\"strong\",[t._v(\"TCP\")]),t._v(\" 协议\")]),t._v(\" \"),s(\"p\",[t._v(\"按层次分，TCP 位于传输层，提供可靠的字节流服务。\")]),t._v(\" \"),s(\"p\",[t._v(\"所谓的字节流服务(Byte Stream Service)是指，为了方便传输，将大 块数据分割成以报文段(segment)为单位的数据包进行管理。而可 靠的传输服务是指，能够把数据准确可靠地传给对方。一言以蔽之， TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够 确认数据最终是否送达到对方。\")]),t._v(\" \"),s(\"p\",[t._v(\"确保数据能到达目标\")]),t._v(\" \"),s(\"p\",[t._v(\"为了准确无误地将数据送达目标处，TCP 协议采用了三次握手 (three-way handshaking)策略。用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。\")]),t._v(\" \"),s(\"p\",[t._v(\"握手过程中使用了 TCP 的标志(flag) —— SYN(synchronize) 和 ACK(acknowledgement)。\")]),t._v(\" \"),s(\"p\",[t._v(\"发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后， 回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发 送端再回传一个带 ACK 标志的数据包，代表“握手”结束。\")]),t._v(\" \"),s(\"p\",[t._v(\"若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发 送相同的数据包。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-e18b22cde01d5935b5086eda69468155_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"除了上述三次握手，TCP 协议还有其他各种手段来保证通信的可靠 性。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"负责域名解析的-dns-服务\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#负责域名解析的-dns-服务\"}},[t._v(\"#\")]),t._v(\" 负责域名解析的 \"),s(\"strong\",[t._v(\"DNS\")]),t._v(\" 服务\")]),t._v(\" \"),s(\"p\",[t._v(\"DNS(Domain Name System)服务是和 HTTP 协议一样位于应用层的\")]),t._v(\" \"),s(\"p\",[t._v(\"协议。它提供域名到 IP 地址之间的解析服务。 计算机既可以被赋予 IP 地址，也可以被赋予主机名和域名。比如\")]),t._v(\" \"),s(\"p\",[t._v(\"www.hackr.jp。\")]),t._v(\" \"),s(\"p\",[t._v(\"用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP 地址访问。因为与 IP 地址的一组纯数字相比，用字母配合数字的表 示形式来指定计算机名更符合人类的记忆习惯。\")]),t._v(\" \"),s(\"p\",[t._v(\"但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅 长处理一长串数字。\")]),t._v(\" \"),s(\"p\",[t._v(\"为了解决上述的问题，DNS 服务应运而生。DNS 协议提供通过域名 查找 IP 地址，或逆向从 IP 地址反查域名的服务。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-f135ab135a4c6e708e6149ada7d7b410_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"h2\",{attrs:{id:\"简单的http协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简单的http协议\"}},[t._v(\"#\")]),t._v(\" 简单的HTTP协议\")]),t._v(\" \"),s(\"p\",[t._v(\"本章将针对 HTTP 协议结构进行讲解，主要使用HTTP/1.1版本。学完这章，想必大家就能理解 HTTP 协议的基础了。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http协议用于客户端和服务器端之间-的通信\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http协议用于客户端和服务器端之间-的通信\"}},[t._v(\"#\")]),t._v(\" HTTP协议用于客户端和服务器端之间 的通信\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议和 TCP/IP 协议族内的其他众多的协议相同，用于客户端和 服务器之间的通信。\")]),t._v(\" \"),s(\"p\",[t._v(\"请求访问文本或图像等一系列资源的一端称为客户端，而提供资源响应的一 端称为服务器端。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-9d0b37824c8153d7bc2755203bdf6367_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"在两台计算机之间使用 HTTP 协议通信时，在一条通信线路上必定有 一端是客户端，另一端则是服务器端。\")]),t._v(\" \"),s(\"p\",[t._v(\"有时候，按实际情况，两台计算机作为客户端和服务器端的角色有可 能会互换。但就仅从一条通信路线来说，服务器端和客户端的角色是 确定的，而用 HTTP 协议能够明确区分哪端是客户端，哪端是服务器 端。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-83d687ce95f3e719acb9ff916921ed20_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返 回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有 接收到请求之前不会发送响应。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-437c54275145a6422980b8cb2f9a5e92_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"客户端发送请求：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"index\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"htm \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\n\\nHost\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp\\n\")])])])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"服务器发送响应\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"200\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"OK\")]),t._v(\"\\nData\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"Tue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10\")]),t._v(\" Jul \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2020\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"06\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"50\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"15\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GMT\")]),t._v(\"\\nCntent\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Length\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"362\")]),t._v(\"\\nContent\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Type\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"text\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"html\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"html\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"...\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"客户端\")]),t._v(\"：起始行开头的GET表示请求访问服务器的类型，称为方法 (method)。随后的字符串 /index.htm 指明了请求访问的资源对象， 也叫做请求 URI(request-URI)。最后的 HTTP/1.1，即 HTTP 的版本 号，用来提示客户端使用的 HTTP 协议功能。\")]),t._v(\" \"),s(\"p\",[t._v(\"综合来看，这段请求内容的意思是:请求访问某台 HTTP 服务器上的 /index.htm 页面资源。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"服务器\")]),t._v(\"：在起始行开头的 HTTP/1.1 表示服务器对应的 HTTP 版本。\")]),t._v(\" \"),s(\"p\",[t._v(\"紧挨着的 200 OK 表示请求的处理结果的状态码(status code)和原因 短语(reason-phrase)。下一行显示了创建响应的日期时间，是首部 字段(header field)内的一个属性。\")]),t._v(\" \"),s(\"p\",[t._v(\"接着以一空行分隔，之后的内容称为资源实体的主体(entity body)。\")]),t._v(\" \"),s(\"p\",[t._v(\"响应报文基本上由协议版本、状态码(表示请求成功或失败的数字代 码)、用以解释状态码的原因短语、可选的响应首部字段以及实体主 体构成。稍后我们会对这些内容进行详细说明。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n* HTTP/1.1 协议版本\\n* 200      状态码\\n* OK       状态码的原因短语\\n*\\n* 下面为 响应首部字段\\n* Data:Tue,10 Jul 2020 06:50:15 GMT\\n* Cntent.Length:362\\n* Content.Type:text/html\\n*\\n*  下面为 主体\\n*  <html>\\n*  ...\\n*/\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"以上就是响应报文的构成。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http是不保存状态的协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http是不保存状态的协议\"}},[t._v(\"#\")]),t._v(\" HTTP是不保存状态的协议\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 是一种不保存状态，即无状态(stateless)协议。HTTP 协议自 身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个 级别，协议对于发送过的请求或响应都不做持久化处理。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"客户端(说：你之前发送了什么给我来着？)\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"服务器(说：我想想，之前发送了什么给你来着？好像，我也不知道哦！)\")])]),t._v(\" \"),s(\"p\",[t._v(\"以上即说明，\"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 协议自身不具备保存之前发送过的请求或响应的功能\")]),t._v(\" \"),s(\"p\",[t._v(\"使用 HTTP 协议，每当有新的请求发送时，就会有对应的新响应产 生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了 更快地处理大量事务，确保协议的可伸缩性，而特意把 HTTP 协议设 计成如此简单的。\")]),t._v(\" \"),s(\"p\",[t._v(\"可是，随着 Web 的不断发展，因无状态而导致业务处理变得棘手的 情况增多了。比如，用户登录到一家购物网站，即使他跳转到该站的其他页面后，也需要能继续保持登录状态。针对这个实例，网站为了 能够掌握是谁送出的请求，需要保存用户的状态。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/1.1 虽然是无状态协议，但为了实现期望的保持状态功能，于 是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管 理状态了。有关 Cookie 的详细内容稍后讲解。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"请求uri定位资源\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#请求uri定位资源\"}},[t._v(\"#\")]),t._v(\" 请求URI定位资源\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议使用 URI 定位互联网上的资源。正是因为 URI 的特定功能，在互联网上任意位置的资源都能访问到。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-b7c88e705571339fd7803af55bfb8f98_1440w.png\",alt:\"URI\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为\"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 协议使用 \"),s(\"strong\",[t._v(\"URI\")]),t._v(\" 让客户端定位到资源\")])]),t._v(\" \"),s(\"p\",[t._v(\"当客户端请求访问资源而发送请求时，URI 需要将作为请求报文中的请求 URI 包含在内。指定请求 URI 的方式有很多。比如：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"URI为完整的请求RUL\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" http\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"index\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"html \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"在首部字段Host中写明网络域名或IP地址\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"index\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"html \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\nHost\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp\\n\")])])])])]),t._v(\" \"),s(\"p\",[t._v(\"除此之外，如果不是访问特定资源而是对服务器本身发起请求，可以 用一个 * 来代替请求 URI。下面这个例子是查询 HTTP 服务器端支持 的 HTTP 方法种类。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"OPTIONS\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\n\")])])]),s(\"h3\",{attrs:{id:\"告知服务器意图的-http-方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#告知服务器意图的-http-方法\"}},[t._v(\"#\")]),t._v(\" 告知服务器意图的 \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 方法\")]),t._v(\" \"),s(\"p\",[t._v(\"下面，我们介绍 HTTP/1.1 中可使用的方法。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"GET\")]),t._v(\" :获取资源\")]),t._v(\" \"),s(\"p\",[t._v(\"GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器 端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保 持原样返回;如果是像 CGI(Common Gateway Interface，通用网关接 口)那样的程序，则返回经过执行后的输出结果。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-21804ff65474b5d8bdfe9c73a0315e2c_1440w.png\",alt:\"资源\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"GET /index.html HTTP/1.1\"),s(\"br\"),t._v(\"Host: www.hackr.jp\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"返回index.html的页面资源\")])])])]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"GET /index.html HTTP/1.1\"),s(\"br\"),t._v(\" Host: www.hackr.jp\"),s(\"br\"),t._v(\" If-Modified-Since: Thu, 12 Jul 2012 07:30:00 GMT\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"仅返回2012年7 月12日7 点30分以后更新过的index.html页面资源。如果未 有内容更新，则以状态码304 Not Modified作为响应返回\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"POST\")]),t._v(\":传输实体主体\\nPOST 方法用来传输实体的主体。\")]),t._v(\" \"),s(\"p\",[t._v(\"虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行 传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取响应的主体内容。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-ab182825c3765e5b41a193e71b4196da_1440w.png\",alt:\"post\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"POST /submit.cgi HTTP/1.1\"),s(\"br\"),t._v(\" Host: www.hackr.jp\"),s(\"br\"),t._v(\" Content-Length: 1560(1560字节的数据)\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"返回 submit.cgi 接收数据的处理结果\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"PUT\")]),t._v(\":传输文件\")]),t._v(\" \"),s(\"p\",[t._v(\"PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请\")]),t._v(\" \"),s(\"p\",[t._v(\"求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。\")]),t._v(\" \"),s(\"p\",[t._v(\"但是，鉴于 HTTP/1.1 的 PUT 方法自身不带验证机制，任何人都可以 上传文件 , 存在安全性问题，因此一般的 Web 网站不使用该方法。若 配合 Web 应用程序的验证机制，或架构设计采用 REST(REpresentational State Transfer，表征状态转移)标准的同类 Web 网站，就可能会开放使用 PUT 方法。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-1756d9bf52549c770ee8cfebe5849fff_1440w.png\",alt:\"put\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"PUT /example.html HTTP/1.1\"),s(\"br\"),t._v(\" Host: www.hackr.jp\"),s(\"br\"),t._v(\" Content-Type: text/html\"),s(\"br\"),t._v(\" Content-Length: 1560(1560 字节的数据)\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"返回 submit.cgi 接收数据的处理结果\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"HEAD\")]),t._v(\":获得报文首部\")]),t._v(\" \"),s(\"p\",[t._v(\"HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-0b23f0f27e4c963f12dfeb481dd882b8_1440w.png\",alt:\"head\"}})]),t._v(\" \"),s(\"p\",[t._v(\"和 \"),s(\"strong\",[t._v(\"GET\")]),t._v(\" 一样，但不返回报文主体\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"HEAD /index.html HTTP/1.1 Host: www.hackr.jp\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"返回index.html有关的响应首部\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"DELETE\")]),t._v(\":删除文件\")]),t._v(\" \"),s(\"p\",[t._v(\"DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按 请求 URI 删除指定的资源。\")]),t._v(\" \"),s(\"p\",[t._v(\"但是，HTTP/1.1 的 DELETE 方法本身和 PUT 方法一样不带验证机 制，所以一般的 Web 网站也不使用 DELETE 方法。当配合 Web 应用 程序的验证机制，或遵守 REST 标准时还是有可能会开放使用的。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-2ba157f6fa545f4ee40a5e789b062b27_1440w.png\",alt:\"delete\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"DELETE /example.html HTTP/1.1 Host: www.hackr.jp\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"响应返回状态码 204 No Content(比如 :该 html 已从该服务器上删除)\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"OPTIONS\")]),t._v(\":询问支持的方法\")]),t._v(\" \"),s(\"p\",[t._v(\"OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-5cd11c2ebe6d0250ac6233fded546c85_1440w.png\",alt:\"options\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"OPTIONS * HTTP/1.1 Host: www.hackr.jp\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"HTTP/1.1 200 OK\"),s(\"br\"),t._v(\" Allow: GET, POST, HEAD, OPTIONS (返回服务器支持的方法)\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"持久连接节省通信量\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#持久连接节省通信量\"}},[t._v(\"#\")]),t._v(\" 持久连接节省通信量\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP 连接。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-4e30c8a19e1dbd680396eff691cab20c_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"以当年的通信情况来说，因为都是些容量很小的文本传输，所以即使 这样也没有多大问题。可随着 HTTP 的普及，文档中包含大量图片的 情况多了起来。\")]),t._v(\" \"),s(\"p\",[t._v(\"比如，使用浏览器浏览一个包含多张图片的 HTML 页面时，在发送 请求访问 HTML 页面资源的同时，也会请求该 HTML 页面里包含的 其他资源。因此，每次的请求都会造成无谓的 TCP 连接建立和断 开，增加通信量的开销。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"持久连接\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#持久连接\"}},[t._v(\"#\")]),t._v(\" 持久连接\")]),t._v(\" \"),s(\"p\",[t._v(\"为解决上述 TCP 连接的问题，HTTP/1.1 和一部分的 HTTP/1.0 想出了 持久连接(HTTP Persistent Connections，也称为 HTTP keep-alive 或 HTTP connection reuse)的方法。持久连接的特点是，只要任意一端 没有明确提出断开连接，则保持 TCP 连接状态。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-d74942352520d0e593977d5da42e5ac0_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"持久连接旨在建立 \"),s(\"strong\",[t._v(\"1\")]),t._v(\" 次 \"),s(\"strong\",[t._v(\"TCP\")]),t._v(\" 连接后进行多次请求和响应的交 互\")])]),t._v(\" \"),s(\"p\",[t._v(\"持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额 外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使 HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相 应提高了。\")]),t._v(\" \"),s(\"p\",[t._v(\"在 HTTP/1.1 中，所有的连接默认都是持久连接，但在 HTTP/1.0 内并 未标准化。虽然有一部分服务器通过非标准的手段实现了持久连接， 但服务器端不一定能够支持持久连接。毫无疑问，除了服务器端，客 户端也需要支持持久连接。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"管道化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#管道化\"}},[t._v(\"#\")]),t._v(\" 管道化\")]),t._v(\" \"),s(\"p\",[t._v(\"持久连接使得多数请求以管道化(pipelining)方式发送成为可能。从 前发送请求后需等待并收到响应，才能发送下一个请求。管道化技术 出现后，不用等待响应亦可直接发送下一个请求。\")]),t._v(\" \"),s(\"p\",[t._v(\"这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待 响应了。即异步请求。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-13a2f759b3b3d18ff7ea730ee5fd807d_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图所示，不需要等待响应，直接发送下一个请求。\")])]),t._v(\" \"),s(\"p\",[t._v(\"比如，当请求一个包含 10 张图片的 HTML Web 页面，与挨个连接相 比，用持久连接可以让请求更快结束。而管道化技术则比持久连接还 要快。请求数越多，时间差就越明显。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"使用-cookie-的状态管理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用-cookie-的状态管理\"}},[t._v(\"#\")]),t._v(\" 使用 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 的状态管理\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 是无状态协议，它不对之前发生过的请求和响应的状态进行管\")]),t._v(\" \"),s(\"p\",[t._v(\"理。也就是说，无法根据之前的状态进行本次的请求处理。\")]),t._v(\" \"),s(\"p\",[t._v(\"假设要求登录认证的 Web 页面本身无法进行状态的管理(不记录已 登录的状态)，那么每次跳转新页面不是要再次登录，就是要在每次 请求报文中附加参数来管理登录状态。\")]),t._v(\" \"),s(\"p\",[t._v(\"不可否认，无状态协议当然也有它的优点。由于不必保存状态，自然 可减少服务器的 CPU 及内存资源的消耗。从另一侧面来说，也正是 因为 HTTP 协议本身是非常简单的，所以才会被应用在各种场景里。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-6684aee3f6227685ed8e276079a36923_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图 如果让服务器管理全部客户端状态则会成为负担\")])]),t._v(\" \"),s(\"p\",[t._v(\"保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入 了 Cookie 技术。Cookie 技术通过在请求和响应报文中写入 Cookie 信 息来控制客户端的状态。\")]),t._v(\" \"),s(\"p\",[t._v(\"Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的 首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器 发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出 去。\")]),t._v(\" \"),s(\"p\",[t._v(\"服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一 个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前 的状态信息。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-850e3f92c83049c164c0bd8301790c72_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为 没有 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 信息状态下的请求\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-218733622e2bc5e2c75b13eb43e4a8f7_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为 第 \"),s(\"strong\",[t._v(\"2\")]),t._v(\" 次以后(存有 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 信息状态)的请求\")])]),t._v(\" \"),s(\"p\",[t._v(\"上面展示了发生 Cookie 交互的情景，HTTP 请求报文和响应报文的内 容如下。\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"请求报文(没有 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 信息的状态)\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"reader\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\nHost\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"首部字段内没有Cookie的相关信息\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"响应报文(服务器端生成 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 信息)\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"200\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"OK\")]),t._v(\"\\nDate\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Thu\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"12\")]),t._v(\" Jul \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2012\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"07\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"12\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"20\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GMT\")]),t._v(\"\\nServer\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Apache\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"Set\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Cookie\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" sid\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1342077140226724\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" path\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" expires\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"Wed\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Oct\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"12\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"07\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"12\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"20\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GMT\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\nContent\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" text\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"plain\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" charset\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"UTF\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"请求报文(自动发送保存着的 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 信息)\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"image\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\nHost\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp\\nCookie\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" sid\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1342077140226724\")]),t._v(\"\\n\")])])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"http报文内的http信息\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http报文内的http信息\"}},[t._v(\"#\")]),t._v(\" HTTP报文内的HTTP信息\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 通信过程包括从客户端发往服务器端的请求及从服务器端返回 客户端的响应。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-报文\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-报文\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 报文\")]),t._v(\" \"),s(\"p\",[t._v(\"用于 HTTP 协议交互的信息被称为 HTTP 报文。请求端(客户端)的 HTTP 报文叫做请求报文，响应端(服务器端)的叫做响应报文。 HTTP 报文本身是由多行数据构成的字符串文 本。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 报文大致可分为报文首部和报文主体两块。两者由最初出现的 空行来划分。通常，并不一定要有报文主体。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-da5da5fdaebaafd36e4b86b829e1ccf1_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为 请求报文(上)和响应报文(下)的结构\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"编码提升传输速率\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#编码提升传输速率\"}},[t._v(\"#\")]),t._v(\" 编码提升传输速率\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 在传输数据时可以按照数据原貌直接传输，但也可以在传输过 程中通过编码提升传输速率。通过在传输时编码，能有效地处理大量 的访问请求。但是，编码的操作需要计算机来完成，因此会消耗更多 的 CPU 等资源。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"报文主体和实体主体的差异\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#报文主体和实体主体的差异\"}},[t._v(\"#\")]),t._v(\" 报文主体和实体主体的差异\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"报文(message)\")])]),t._v(\" \"),s(\"p\",[t._v(\"是 HTTP 通信中的基本单位，由 8 位组字节流(octet sequence， 其中 octet 为 8 个比特)组成，通过 HTTP 通信传输。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"实体(entity)\")])]),t._v(\" \"),s(\"p\",[t._v(\"作为请求或响应的有效载荷数据(补充项)被传输，其内容由实\")])])]),t._v(\" \"),s(\"p\",[t._v(\"体首部和实体主体组成。\\nHTTP 报文的主体用于传输请求或响应的实体主体。\")]),t._v(\" \"),s(\"p\",[t._v(\"通常，报文主体等于实体主体。只有当传输中进行编码操作时，实体 主体的内容发生变化，才导致它和报文主体产生差异。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"压缩传输的内容编码\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#压缩传输的内容编码\"}},[t._v(\"#\")]),t._v(\" 压缩传输的内容编码\")]),t._v(\" \"),s(\"p\",[t._v(\"向待发送邮件内增加附件时，为了使邮件容量变小，我们会先用 ZIP 压缩文件之后再添加附件发送。HTTP 协议中有一种被称为内容编码 的功能也能进行类似的操作。\")]),t._v(\" \"),s(\"p\",[t._v(\"内容编码指明应用在实体内容上的编码格式，并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-a05f14d55a5f96c154ee0684460b1fcc_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为内容编码\")])]),t._v(\" \"),s(\"p\",[t._v(\"常用的内容编码有以下几种。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"gzip\")]),t._v(\"(\"),s(\"strong\",[t._v(\"GNU zip\")]),t._v(\")\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"compress\")]),t._v(\"(\"),s(\"strong\",[t._v(\"UNIX\")]),t._v(\" 系统的标准压缩)\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"deflate\")]),t._v(\"(\"),s(\"strong\",[t._v(\"zlib\")]),t._v(\")\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"identity\")]),t._v(\"(不进行编码)\")])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"分割发送的分块传输编码\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分割发送的分块传输编码\"}},[t._v(\"#\")]),t._v(\" 分割发送的分块传输编码\")]),t._v(\" \"),s(\"p\",[t._v(\"在 HTTP 通信过程中，请求的编码实体资源尚未全部传输完成之前， 浏览器无法显示请求页面。在传输大容量数据时，通过把数据分割成 多块，能够让浏览器逐步显示页面。\")]),t._v(\" \"),s(\"p\",[t._v(\"这种把实体主体分块的功能称为分块传输编码(Chunked Transfer Coding)。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-d15934a7554ed2f521a2d4e7a0a011a8_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为 分块传输编码\")])]),t._v(\" \"),s(\"p\",[t._v(\"分块传输编码会将实体主体分成多个部分(块)。每一块都会用十六 进制来标记块的大小，而实体主体的最后一块会使用“0(CR+LF)”来标 记。\")]),t._v(\" \"),s(\"p\",[t._v(\"使用分块传输编码的实体主体会由接收的客户端负责解码，恢复到编 码前的实体主体。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/1.1 中存在一种称为传输编码(Transfer Coding)的机制，它可 以在通信时按某种编码方式传输，但只定义作用于分块传输编码中。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"发送多种数据的多部分对象集合\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#发送多种数据的多部分对象集合\"}},[t._v(\"#\")]),t._v(\" 发送多种数据的多部分对象集合\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-088305a993cadcff1da5039d29e6799c_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"发送邮件时，我们可以在邮件里写入文字并添加多份附件。这是因为 采用了 MIME(Multipurpose Internet Mail Extensions，多用途因特网邮 件扩展)机制，它允许邮件处理文本、图片、视频等多个不同类型的数据。例如，图片等二进制数据以 ASCII 码字符串编码的方式指明， 就是利用 MIME 来描述标记数据类型。而在 MIME 扩展中会使用一 种称为多部分对象集合(Multipart)的方法，来容纳多份不同类型的 数据。\")]),t._v(\" \"),s(\"p\",[t._v(\"相应地，HTTP 协议中也采纳了多部分对象集合，发送的一份报文主 体内可含有多类型实体。通常是在图片或文本文件等上传时使用。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"multipart/form-data\")])]),t._v(\" \"),s(\"p\",[t._v(\"在 Web 表单文件上传时使用。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"multipart/byte range s\")])]),t._v(\" \"),s(\"p\",[t._v(\"状态码 206(Partial Content，部分内容)响应报文包含了多个范 围的内容时使用。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"multipart/form-data\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[t._v(\"Content\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" multipart\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"form\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"data\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" boundary\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"AaB03x  \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),t._v(\"AaB03x\\nContent\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Disposition\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" form\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"data\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" name\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"field1\"')]),t._v(\"\\n \\nJoe Blow\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),t._v(\"AaB03x\\nContent\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Disposition\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" form\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"data\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" name\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"pics\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" filename\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"file1.txt\"')]),t._v(\" Content\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" text\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"plain\\n \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"...\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"file1\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"txt的数据\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"...\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),t._v(\"AaB03x\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"multipart/byte range s\")])]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"206\")]),t._v(\" Partial Content\\nDate\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Fri\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"13\")]),t._v(\" Jul \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2012\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"02\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"45\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"26\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GMT\")]),t._v(\"\\nLast\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Modified\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Fri\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"31\")]),t._v(\" Aug \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2007\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"02\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"02\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"20\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GMT\")]),t._v(\"\\nContent\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" multipart\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"byteranges\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" boundary\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"THIS_STRING_SEPARATES\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"THIS_STRING_SEPARATES\")]),t._v(\"\\nContent\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" application\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"pdf Content\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Range\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" bytes \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"500\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"999\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8000\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"...\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"范围指定的数据\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"...\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"THIS_STRING_SEPARATES\")]),t._v(\" Content\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" application\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"pdf Content\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Range\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" bytes \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"7000\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"7999\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8000\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"...\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"范围指定的数据\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"...\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"THIS_STRING_SEPARATES\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"--\")]),t._v(\"\\n\")])])])])]),t._v(\" \"),s(\"p\",[t._v(\"在 HTTP 报文中使用多部分对象集合时，需要在首部字段里加上 Content-type。有关这个首部字段，我们稍后讲解。\")]),t._v(\" \"),s(\"p\",[t._v(\"使用 boundary 字符串来划分多部分对象集合指明的各类实体。在 boundary 字符串指定的各个实体的起始行之前插入“--”标记(例如:- -AaB03x、--THIS_STRING_SEPARATES)，而在多部分对象集合对 应的字符串的最后插入“--”标记(例如:--AaB03x--、-- THIS_STRING_SEPARATES--)作为结束。\")]),t._v(\" \"),s(\"p\",[t._v(\"多部分对象集合的每个部分类型中，都可以含有首部字段。另外，可 以在某个部分中嵌套使用多部分对象集合。有关多部分对象集合更详 细的解释，请参考 RFC2046。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"获取部分内容的范围请求\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#获取部分内容的范围请求\"}},[t._v(\"#\")]),t._v(\" 获取部分内容的范围请求\")]),t._v(\" \"),s(\"p\",[t._v(\"以前，用户不能使用现在这种高速的带宽访问互联网，当时，下载一 个尺寸稍大的图片或文件就已经很吃力了。如果下载过程中遇到网络 中断的情况，那就必须重头开始。为了解决上述问题，需要一种可恢 复的机制。所谓恢复是指能从之前下载中断处恢复下载。\")]),t._v(\" \"),s(\"p\",[t._v(\"要实现该功能需要指定下载的实体范围。像这样，指定范围发送的请 求叫做范围请求(Range Request)。\")]),t._v(\" \"),s(\"p\",[t._v(\"对一份 10 000 字节大小的资源，如果使用范围请求，可以只请求 5001~10 000 字节内的资源。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-abba2c24d486fc0618996b37c26a4c7a_1440w.png\",alt:\"资源\"}})]),t._v(\" \"),s(\"p\",[t._v(\"执行范围请求时，会用到首部字段 Range 来指定资源的 byte 范围。\")]),t._v(\" \"),s(\"p\",[t._v(\"byte 范围的指定形式如下。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"5001~10 000\")]),t._v(\" 字节\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[t._v(\"Range\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" bytes\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5001\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10000\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"从 \"),s(\"strong\",[t._v(\"5001\")]),t._v(\" 字节之后全部的\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[t._v(\"Range\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" bytes\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5001\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"从一开始到 \"),s(\"strong\",[t._v(\"3000\")]),t._v(\" 字节和 \"),s(\"strong\",[t._v(\"5000~7000\")]),t._v(\" 字节的多重范围\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[t._v(\"Range\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" bytes\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"3000\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5000\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"7000\")]),t._v(\"\\n\")])])])])]),t._v(\" \"),s(\"p\",[t._v(\"针对范围请求，响应会返回状态码为 206 Partial Content 的响应报 文。另外，对于多重范围的范围请求，响应会在首部字段 Content- Type 标明 multipart/byteranges 后返回响应报文。\")]),t._v(\" \"),s(\"p\",[t._v(\"如果服务器端无法响应范围请求，则会返回状态码 200 OK 和完整的 实体内容。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"内容协商返回最合适的内容\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内容协商返回最合适的内容\"}},[t._v(\"#\")]),t._v(\" 内容协商返回最合适的内容\")]),t._v(\" \"),s(\"p\",[t._v(\"同一个 Web 网站有可能存在着多份相同内容的页面。比如英语版和\")]),t._v(\" \"),s(\"p\",[t._v(\"中文版的 Web 页面，它们内容上虽相同，但使用的语言却不同。\")]),t._v(\" \"),s(\"p\",[t._v(\"当浏览器的默认语言为英语或中文，访问相同 URI 的 Web 页面时， 则会显示对应的英语版或中文版的 Web 页面。这样的机制称为内容 协商(Content Negotiation)。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-1cc25abaa3bae30d38e64869ea20a770_1440w.png\",alt:\"google搜索\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为访问google搜索\")])]),t._v(\" \"),s(\"p\",[t._v(\"内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然 后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字 符集、编码方式等作为判断的基准。\")]),t._v(\" \"),s(\"p\",[t._v(\"包含在请求报文中的某些首部字段(如下)就是判断的基准。这些首 部字段的详细说明请参考下一章。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"Acce pt\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"Acce pt-Charse t\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"Acce pt-Encoding\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"Acce pt-Language\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"Conte nt-Language\")])])]),t._v(\" \"),s(\"p\",[t._v(\"内容协商技术有以下 3 种类型。\")]),t._v(\" \"),s(\"p\",[t._v(\"服务器驱动协商(\"),s(\"strong\",[t._v(\"Server-driven Negotiation\")]),t._v(\")\")]),t._v(\" \"),s(\"p\",[t._v(\"由服务器端进行内容协商。以请求的首部字段为参考，在服务器端自 动处理。但对用户来说，以浏览器发送的信息作为判定的依据，并不 一定能筛选出最优内容。\")]),t._v(\" \"),s(\"p\",[t._v(\"客户端驱动协商(\"),s(\"strong\",[t._v(\"Agent-driven Negotiation\")]),t._v(\")\")]),t._v(\" \"),s(\"p\",[t._v(\"由客户端进行内容协商的方式。用户从浏览器显示的可选项列表中手 动选择。还可以利用 JavaScript 脚本在 Web 页面上自动进行上述选 择。比如按 OS 的类型或浏览器类型，自行切换成 PC 版页面或手机 版页面。\")]),t._v(\" \"),s(\"p\",[t._v(\"透明协商(\"),s(\"strong\",[t._v(\"Transparent Negotiation\")]),t._v(\")\")]),t._v(\" \"),s(\"p\",[t._v(\"是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进 行内容协商的一种方法。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"返回结果的-http-状态-码\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#返回结果的-http-状态-码\"}},[t._v(\"#\")]),t._v(\" 返回结果的 \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 状态 码\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 状态码负责表示客户端 HTTP 请求的返回结果、标记服务器端 的处理是否正常、通知出现的错误等工作。让我们通过本章的学习， 好好了解一下状态码的工作机制。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"状态码告知从服务器端返回的请求结果\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#状态码告知从服务器端返回的请求结果\"}},[t._v(\"#\")]),t._v(\" 状态码告知从服务器端返回的请求结果\")]),t._v(\" \"),s(\"p\",[t._v(\"状态码的职责是当客户端向服务器端发送请求时，描述返回的请求结 果。借助状态码，用户可以知道服务器端是正常处理了请求，还是出 现了错误。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-059cfab4f18d30000cda0617876991ae_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图 响应的状态码可描述请求的处理结果\")])]),t._v(\" \"),s(\"p\",[t._v(\"状态码如 200 OK，以 3 位数字和原因短语组成。\")]),t._v(\" \"),s(\"p\",[t._v(\"数字中的第一位指定了响应类别，后两位无分类。响应类别有以下 5 种。\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"状态码\")]),t._v(\" \"),s(\"th\",[t._v(\"类别\")]),t._v(\" \"),s(\"th\",[t._v(\"原因短语\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"1XX\")]),t._v(\" \"),s(\"td\",[t._v(\"Informational(信息性状态码)\")]),t._v(\" \"),s(\"td\",[t._v(\"接收的请求正在处理\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"2XX\")]),t._v(\" \"),s(\"td\",[t._v(\"Success(成功状态码)\")]),t._v(\" \"),s(\"td\",[t._v(\"请求正常处理完毕\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"3XX\")]),t._v(\" \"),s(\"td\",[t._v(\"Redirection(重定向状态码)\")]),t._v(\" \"),s(\"td\",[t._v(\"需要进行附加操作以完成请求\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"4XX\")]),t._v(\" \"),s(\"td\",[t._v(\"Client Error(客户端错误状态码)\")]),t._v(\" \"),s(\"td\",[t._v(\"服务器无法处理请求\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"5XX\")]),t._v(\" \"),s(\"td\",[t._v(\"Server Error(服务器错误状态码)\")]),t._v(\" \"),s(\"td\",[t._v(\"服务器处理请求出错\")])])])]),t._v(\" \"),s(\"p\",[t._v(\"只要遵守状态码类别的定义，即使改变 RFC2616 中定义的状态码， 或服务器端自行创建状态码都没问题。\")]),t._v(\" \"),s(\"p\",[t._v(\"仅记录在 RFC2616 上的 HTTP 状态码就达 40 种，若再加上 WebDAV(Web-based Distributed Authoring and Versioning，基于万维网 的分布式创作和版本控制)(RFC4918、5842) 和附加 HTTP 状态码 (RFC6585)等扩展，数量就达 60 余种。别看种类繁多，实际上经 常使用的大概只有 14 种。接下来，我们就介绍一下这些具有代表性 的 14 个状态码。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_2xx-成功\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2xx-成功\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"2XX\")]),t._v(\" 成功\")]),t._v(\" \"),s(\"p\",[t._v(\"2XX 的响应结果表明请求被正常处理了。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_200-ok\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_200-ok\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"200 OK\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-c623f19085771ba058de23a72ad9e3ec_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"表示从客户端发来的请求在服务器端被正常处理了。\")]),t._v(\" \"),s(\"p\",[t._v(\"在响应报文内，随状态码一起返回的信息会因方法的不同而发生改 变。比如，使用 GET 方法时，对应请求资源的实体会作为响应返 回;而使用 HEAD 方法时，对应请求资源的实体首部不随报文主体 作为响应返回(即在响应中只返回首部，不会返回实体的主体部 分)。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_204-no-content\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_204-no-content\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"204 No Content\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-79c5221f692b1c16f5d0bcf06f921bc2_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"该状态码代表服务器接收的请求已成功处理，但在返回的响应报文中 不含实体的主体部分。另外，也不允许返回任何实体的主体。比如， 当从浏览器发出请求处理后，返回 204 响应，那么浏览器显示的页面 不发生更新。\")]),t._v(\" \"),s(\"p\",[t._v(\"一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_3xx-重定向\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3xx-重定向\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"3XX\")]),t._v(\" 重定向\")]),t._v(\" \"),s(\"p\",[t._v(\"3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请\")]),t._v(\" \"),s(\"p\",[t._v(\"求。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_301-moved-permanently\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_301-moved-permanently\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"301 Moved Permanently\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-533162f39063316ac923cd6f3028fee0_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"永久性重定向。该状态码表示请求的资源已被分配了新的 URI，以后 应使用资源现在所指的 URI。也就是说，如果已经把资源对应的 URI 保存为书签了，这时应该按 Location 首部字段提示的 URI 重新保存。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_302-found\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_302-found\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"302 Found\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-e9d679e0c684e0ef8d1f182b17339f8a_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"临时性重定向。该状态码表示请求的资源已被分配了新的 URI，希望 用户(本次)能使用新的 URI 访问。\")]),t._v(\" \"),s(\"p\",[t._v(\"和 301 Moved Permanently 状态码相似，但 302 状态码代表的资源不 是被永久移动，只是临时性质的。换句话说，已移动的资源对应的 URI 将来还有可能发生改变。比如，用户把 URI 保存成书签，但不会 像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码 的页面对应的 URI。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_304-not-modified\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_304-not-modified\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"304 Not Modified\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-4ae7e039f79b1abb7cfd14f686769f13_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"该状态码表示客户端发送附带条件的请求 2 时，服务器端允许请求访 问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应 的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关 系。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_4xx-客户端错误\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4xx-客户端错误\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"4XX\")]),t._v(\" 客户端错误\")]),t._v(\" \"),s(\"p\",[t._v(\"4XX 的响应结果表明客户端是发生错误的原因所在。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_400-bad-request\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_400-bad-request\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"400 Bad Request\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-57674f5758b5573056b165e318c96b80_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求 的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态 码。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_401-unauthorized\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_401-unauthorized\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"401 Unauthorized\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-bab2ea472715abbc50d275488fda2eb4_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"该状态码表示发送的请求需要有通过 HTTP 认证(BASIC 认证、 DIGEST 认证)的认证信息。另外若之前已进行过 1 次请求，则表示 用 户认证失败。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_403-forbidden\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_403-forbidden\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"403 Forbidden\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-50c750a28a8781a9f5e037514fc7b49d_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"该状态码表明对请求资源的访问被服务器拒绝了。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_404-not-found\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_404-not-found\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"404 Not Found\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-be3a7f4fe071adc290deda6609972c91_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服 务器端拒绝请求且不想说明理由时使用。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_5xx-服务器错误\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5xx-服务器错误\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"5XX\")]),t._v(\" 服务器错误\")]),t._v(\" \"),s(\"p\",[t._v(\"5XX 的响应结果表明服务器本身发生错误。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_500-internal-server-error\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_500-internal-server-error\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"500 Internal Server Error\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-179162cbbf7e7bdca6c2d04d22ae3ad2_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"_503-service-unavailable\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_503-service-unavailable\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"503 Service Unavailable\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-fa788dc37670525e47e0eb12d186272f_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法 处理请求。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"与http协作的web服-务器\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#与http协作的web服-务器\"}},[t._v(\"#\")]),t._v(\" 与\"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\"协作的\"),s(\"strong\",[t._v(\"Web\")]),t._v(\"服 务器\")]),t._v(\" \"),s(\"p\",[t._v(\"一台 Web 服务器可搭建多个独立域名的 Web 网站，也可作为通信路 径上的中转服务器提升传输效率。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"用单个服务器主机实现多个域名\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#用单个服务器主机实现多个域名\"}},[t._v(\"#\")]),t._v(\" 用单个服务器主机实现多个域名\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/1.1 规范允许一台 HTTP 服务器搭建多个 Web 站点。比如，提 供 Web 托管服务(Web Hosting Service)的供应商，可以用一台服务 器为多位客户服务，也可以以每位客户持有的域名运行各自不同的网 站。这是因为利用了虚拟主机(Virtual Host，又称虚拟服务器)的功 能。\")]),t._v(\" \"),s(\"p\",[t._v(\"即使物理层面只有一台服务器，但只要使用虚拟主机的功能，则可以 假想已具有多台服务器。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-794bfc847eb382f34fc72aa8ccb2938a_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"客户端使用 HTTP 协议访问服务器时，会经常采用类似 www.hackr.jp 这样的主机名和域名。\")]),t._v(\" \"),s(\"p\",[t._v(\"在互联网上，域名通过 DNS 服务映射到 IP 地址(域名解析)之后访 问目标网站。可见，当请求发送到服务器时，已经是以 IP 地址形式 访问了。\")]),t._v(\" \"),s(\"p\",[t._v(\"所以，如果一台服务器内托管了 www.tricorder.jp 和 www.hackr.jp 这 两个域名，使用DNS服务器解析域名后，两者访问的是相同的IP地址。\")]),t._v(\" \"),s(\"p\",[t._v(\"在相同的 IP 地址下，由于虚拟主机可以寄存多个不同主机名和域名 的 Web 网站，因此在发送 HTTP 请求时，必须在 Host 首部内完整指 定主机名或域名的 URI。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"通信数据转发程序-代理、网关、隧-道\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通信数据转发程序-代理、网关、隧-道\"}},[t._v(\"#\")]),t._v(\" 通信数据转发程序 :代理、网关、隧 道\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 通信时，除客户端和服务器以外，还有一些用于通信数据转发 的应用程序，例如代理、网关和隧道。它们可以配合服务器工作。\")]),t._v(\" \"),s(\"p\",[t._v(\"这些应用程序和服务器可以将请求转发给通信线路上的下一站服务 器，并且能接收从那台服务器发送的响应再转发给客户端。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"代理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#代理\"}},[t._v(\"#\")]),t._v(\" 代理\")]),t._v(\" \"),s(\"p\",[t._v(\"代理是一种有转发功能的应用程序，它扮演了位于服务器和客户 端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时 也接收服务器返回的响应并转发给客户端。（比如：\"),s(\"strong\",[t._v(\"nginx\")]),t._v(\"）。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-d2dd7b4fc336b3160f6a218a22210da0_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"代理服务器的基本行为就是接收客户端发送的请求后转发给其他服务 器。代理不改变请求 URI，会直接发送给前方持有资源的目标服务 器。\")]),t._v(\" \"),s(\"p\",[t._v(\"持有资源实体的服务器被称为源服务器。从源服务器返回的响应经过 代理服务器后再传给客户端。\")]),t._v(\" \"),s(\"p\",[t._v(\"使用代理服务器的好处有:利用缓存技术(稍后讲解)减少网络带宽 的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要 目的，等等。\")]),t._v(\" \"),s(\"p\",[t._v(\"代理有多种使用方法，按两种基准分类。一种是是否使用缓存，另一 种是是否会修改报文。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"缓存代理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#缓存代理\"}},[t._v(\"#\")]),t._v(\" 缓存代理\")]),t._v(\" \"),s(\"p\",[t._v(\"代理转发响应时，缓存代理(Caching Proxy)会预先将资源的副本 (缓存)保存在代理服务器上。\")]),t._v(\" \"),s(\"p\",[t._v(\"当代理再次接收到对相同资源的请求时，就可以不从源服务器那里获 取资源，而是将之前缓存的资源作为响应返回。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"透明代理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#透明代理\"}},[t._v(\"#\")]),t._v(\" 透明代理\")]),t._v(\" \"),s(\"p\",[t._v(\"转发请求或响应时，不对报文做任何加工的代理类型被称为透明代理 (Transparent Proxy)。反之，对报文内容进行加工的代理被称为非 透明代理。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"网关\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网关\"}},[t._v(\"#\")]),t._v(\" 网关\")]),t._v(\" \"),s(\"p\",[t._v(\"网关是转发其他服务器通信数据的服务器，接收从客户端发送来的请 求时，它就像自己拥有资源的源服务器一样对请求进行处理。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-a497041f5be320836e5ba8d15a9e3c8f_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图：利用网关可以由 \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 请求转化为其他协议通信 网关的工作机制和代理十分相似。而网关能使通信线\")])]),t._v(\" \"),s(\"p\",[t._v(\"大家都知道，从一个房间走到另一个房间，必然要经过一扇门。同样，从一个网络向另一个网络发送信息，也必须经过一道关口，这道关口就是网关。顾名思义，网关 就是一个网络连接到另一个网络的“关口”。也就是网络关卡。\")]),t._v(\" \"),s(\"p\",[t._v(\"利用网关能提高通信的安全性，因为可以在客户端与网关之间的通信 线路上加密以确保连接的安全。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"隧道\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#隧道\"}},[t._v(\"#\")]),t._v(\" 隧道\")]),t._v(\" \"),s(\"p\",[t._v(\"隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等 加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的 通信。\")]),t._v(\" \"),s(\"p\",[t._v(\"隧道本身不会去解析 HTTP 请求。也就是说，请求保持原样中转给之 后的服务器。隧道会在通信双方断开连接时结束。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-26c0ff8fc8e52e740d4ef228bc4754af_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图：通过隧道的传输，可以和远距离的服务器安全通信。隧道本 身是透明的，客户端不用在意隧道的存在\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"http首部\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http首部\"}},[t._v(\"#\")]),t._v(\" HTTP首部\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议的请求和响应报文中必定包含 HTTP 首部，只是我们平时 在使用 Web 的过程中感受不到它。本章我们一起来学习 HTTP 首部 的结构，以及首部中各字段的用法。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-20a9695544c9c99d76c09e04ddb67fa7_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图：\"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 报文的结构\")])]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议的请求和响应报文中必定包含 HTTP 首部。首部内容为客户端和服务器分别处理请求和响应提供所需要的信息。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-请求报文\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-请求报文\"}},[t._v(\"#\")]),t._v(\" HTTP 请求报文\")]),t._v(\" \"),s(\"p\",[t._v(\"在请求中，HTTP 报文由方法、URI、HTTP 版本、HTTP 首部字段等部分构成。\")]),t._v(\" \"),s(\"p\",[t._v(\"下面的示例是访问 http://hackr.jp 时，请求报文的首部信息。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\nHost\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp\\nUser\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Agent\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Mozilla\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"5.0\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"Windows \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"NT\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"6.1\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"WOW64\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" rv\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"13.0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" Ge Accept\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" text\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"html\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"application\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"xhtml\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\"xml\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"application\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"xml\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"q\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.\")]),t._v(\" Accept\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Language\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" ja\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"en\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"us\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"q\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.7\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\"en\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"q\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0.3\")]),t._v(\"\\nAccept\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Encoding\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" gzip\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" deflate\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"DNT\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"\\nConnection\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" keep\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"alive\\nIf\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Modified\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Since\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Fri\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"31\")]),t._v(\" Aug \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2007\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"02\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"02\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"20\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GMT\")]),t._v(\" If\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"None\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Match\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"45bae1-16a-46d776ac\"')]),t._v(\"\\nCache\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Control\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" max\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"age\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),t._v(\"\\n\")])])]),s(\"h3\",{attrs:{id:\"http-响应报文\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-响应报文\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 响应报文\")]),t._v(\" \"),s(\"p\",[t._v(\"在响应中，HTTP 报文由 HTTP 版本、状态码(数字和原因短语)、 HTTP 首部字段 3 部分构成。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-5daced1eacb85f18feb0ab810d693201_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"以下示例是之前请求访问 http://hackr.jp/ 时，返回的响应报文的首部 信息。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"304\")]),t._v(\" Not Modified\\nDate\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Thu\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"07\")]),t._v(\" Jun \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2012\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"07\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"21\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"36\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GMT\")]),t._v(\" Server\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Apache\\nConnection\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" close\\nEtag\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"45bae1-16a-46d776ac\"')]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"在报文众多的字段当中，HTTP 首部字段包含的信息最为丰富。首部 字段同时存在于请求和响应报文内，并涵盖 HTTP 报文相关的内容信 息。\")]),t._v(\" \"),s(\"p\",[t._v(\"因 HTTP 版本或扩展规范的变化，首部字段可支持的字段内容略有不 同。这里主要涉及 HTTP/1.1 及常用的首部字段。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-首部字段\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-首部字段\"}},[t._v(\"#\")]),t._v(\" HTTP 首部字段\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 首部字段是构成 HTTP 报文的要素之一。在客户端与服务器之 间以 HTTP 协议进行通信的过程中，无论是请求还是响应都会使用首 部字段，它能起到传递额外重要信息的作用。\")]),t._v(\" \"),s(\"p\",[t._v(\"使用首部字段是为了给浏览器和服务器提供报文主体大小、所使用的 语言、认证信息等内容。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"http首部字段结构\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http首部字段结构\"}},[t._v(\"#\")]),t._v(\" HTTP首部字段结构\")]),t._v(\" \"),s(\"p\",[t._v(\"例如，在 HTTP 首部中以 Content-Type 这个字段来表示报文主体的 对象类型。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[t._v(\"Content\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" text\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"html\\n\")])])]),s(\"p\",[t._v(\"另外，字段值对应单个 HTTP 首部字段可以有多个值，如下所示。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[t._v(\"Keep\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Alive\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" timeout\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"15\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" max\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"100\")]),t._v(\"\\n\")])])]),s(\"h4\",{attrs:{id:\"_4-种-http-首部字段类型\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-种-http-首部字段类型\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"4\")]),t._v(\" 种 \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 首部字段类型\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 首部字段根据实际用途被分为以下 4 种类型。\")]),t._v(\" \"),s(\"p\",[t._v(\"通用首部字段(\"),s(\"strong\",[t._v(\"General Header Fields\")]),t._v(\")\")]),t._v(\" \"),s(\"p\",[t._v(\"请求报文和响应报文两方都会使用的首部。\")]),t._v(\" \"),s(\"p\",[t._v(\"请求首部字段(\"),s(\"strong\",[t._v(\"Request Header Fields\")]),t._v(\")\")]),t._v(\" \"),s(\"p\",[t._v(\"从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加 内容、客户端信息、响应内容相关优先级等信息。\")]),t._v(\" \"),s(\"p\",[t._v(\"响应首部字段(\"),s(\"strong\",[t._v(\"Response Header Fields\")]),t._v(\") 从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加\")]),t._v(\" \"),s(\"p\",[t._v(\"内容，也会要求客户端附加额外的内容信息。 实体首部字段(\"),s(\"strong\",[t._v(\"Entity Header Fields\")]),t._v(\")\")]),t._v(\" \"),s(\"p\",[t._v(\"针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更 新时间等与实体有关的信息。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_4-种-http-首部字段类型-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-种-http-首部字段类型-2\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"4\")]),t._v(\" 种 \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 首部字段类型\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"通用首部字段\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通用首部字段\"}},[t._v(\"#\")]),t._v(\" 通用首部字段\")]),t._v(\" \"),s(\"p\",[t._v(\"通用首部字段是指，请求报文和响应报文双方都会使用的首部。\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"首部字段名\")]),t._v(\" \"),s(\"th\",[t._v(\"说明\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"Cache-Control\")]),t._v(\" \"),s(\"td\",[t._v(\"控制缓存的行为\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Connection\")]),t._v(\" \"),s(\"td\",[t._v(\"逐跳首部、连接的管理\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Date\")]),t._v(\" \"),s(\"td\",[t._v(\"创建报文的日期时间\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Pragma\")]),t._v(\" \"),s(\"td\",[t._v(\"报文指令\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Trailer\")]),t._v(\" \"),s(\"td\",[t._v(\"报文末端的首部一览\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Transfer-Encoding\")]),t._v(\" \"),s(\"td\",[t._v(\"指定报文主体的传输编码方式\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Upgrade\")]),t._v(\" \"),s(\"td\",[t._v(\"升级为其他协议\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Via\")]),t._v(\" \"),s(\"td\",[t._v(\"代理服务器的相关信息\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Warning\")]),t._v(\" \"),s(\"td\",[t._v(\"错误通知\")])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"请求首部字段\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#请求首部字段\"}},[t._v(\"#\")]),t._v(\" 请求首部字段\")]),t._v(\" \"),s(\"p\",[t._v(\"请求首部字段是从客户端往服务器端发送请求报文中所使用的字段， 用于补充请求的附加信息、客户端信息、对响应内容相关的优先级等 内容。\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"首部字段名\")]),t._v(\" \"),s(\"th\",[t._v(\"说明\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"Accept\")]),t._v(\" \"),s(\"td\",[t._v(\"用户代理可处理的媒体类型\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Accept-Charset\")]),t._v(\" \"),s(\"td\",[t._v(\"优先的字符集\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Accept-Encoding\")]),t._v(\" \"),s(\"td\",[t._v(\"优先的内容编码\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Accept-Language\")]),t._v(\" \"),s(\"td\",[t._v(\"优先的语言(自然语言)\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Authorization\")]),t._v(\" \"),s(\"td\",[t._v(\"Web认证信息\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Expect\")]),t._v(\" \"),s(\"td\",[t._v(\"期待服务器的特定行为\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"From\")]),t._v(\" \"),s(\"td\",[t._v(\"用户的电子邮箱地址\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Host\")]),t._v(\" \"),s(\"td\",[t._v(\"请求资源所在服务器\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"If-Match\")]),t._v(\" \"),s(\"td\",[t._v(\"比较实体标记(ETag)\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"If-Modified-Since\")]),t._v(\" \"),s(\"td\",[t._v(\"比较资源的更新时间\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"If-None-Match\")]),t._v(\" \"),s(\"td\",[t._v(\"比较实体标记(与 If-Match 相反)\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"If-Range\")]),t._v(\" \"),s(\"td\",[t._v(\"资源未更新时发送实体 Byte 的范围请求\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"If-Unmodified-Since\")]),t._v(\" \"),s(\"td\",[t._v(\"比较资源的更新时间(与If-Modified-Since相反）\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Max-Forwards\")]),t._v(\" \"),s(\"td\",[t._v(\"最大传输逐跳数\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Proxy-Authorization\")]),t._v(\" \"),s(\"td\",[t._v(\"代理服务器要求客户端的认证信息\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Range\")]),t._v(\" \"),s(\"td\",[t._v(\"实体的字节范围请求\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Referer\")]),t._v(\" \"),s(\"td\",[t._v(\"对请求中 URI 的原始获取方\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"TE\")]),t._v(\" \"),s(\"td\",[t._v(\"传输编码的优先级\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"User-Agent\")]),t._v(\" \"),s(\"td\",[t._v(\"HTTP 客户端程序的信息\")])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"响应首部字段\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#响应首部字段\"}},[t._v(\"#\")]),t._v(\" 响应首部字段\")]),t._v(\" \"),s(\"p\",[t._v(\"响应首部字段是由服务器端向客户端返回响应报文中所使用的字段， 用于补充响应的附加信息、服务器信息，以及对客户端的附加要求等 信息。\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"首部字段名\")]),t._v(\" \"),s(\"th\",[t._v(\"说明\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"Accept-Ranges\")]),t._v(\" \"),s(\"td\",[t._v(\"是否接受字节范围请求\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Age\")]),t._v(\" \"),s(\"td\",[t._v(\"推算资源创建经过时间\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"ETag\")]),t._v(\" \"),s(\"td\",[t._v(\"资源的匹配信息\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Location\")]),t._v(\" \"),s(\"td\",[t._v(\"令客户端重定向至指定URI\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Proxy-Authenticate\")]),t._v(\" \"),s(\"td\",[t._v(\"代理服务器对客户端的认证信息\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Retry-After\")]),t._v(\" \"),s(\"td\",[t._v(\"对再次发起请求的时机要求\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Server\")]),t._v(\" \"),s(\"td\",[t._v(\"HTTP服务器的安装信息\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Vary\")]),t._v(\" \"),s(\"td\",[t._v(\"代理服务器缓存的管理信息\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"WWW-Authenticate\")]),t._v(\" \"),s(\"td\",[t._v(\"服务器对客户端的认证信息\")])])])]),t._v(\" \"),s(\"h4\",{attrs:{id:\"实体首部字段\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#实体首部字段\"}},[t._v(\"#\")]),t._v(\" 实体首部字段\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"首部字段名\")]),t._v(\" \"),s(\"th\",[t._v(\"说明\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"Allow\")]),t._v(\" \"),s(\"td\",[t._v(\"资源可支持的HTTP方法\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Content-Encoding\")]),t._v(\" \"),s(\"td\",[t._v(\"实体主体适用的编码方式\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Content-Language\")]),t._v(\" \"),s(\"td\",[t._v(\"实体主体的自然语言\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Content-Length\")]),t._v(\" \"),s(\"td\",[t._v(\"实体主体的大小(单位:字节)\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Content-Location\")]),t._v(\" \"),s(\"td\",[t._v(\"替代对应资源的URI\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Content-MD5\")]),t._v(\" \"),s(\"td\",[t._v(\"实体主体的报文摘要\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Content-Range\")]),t._v(\" \"),s(\"td\",[t._v(\"实体主体的位置范围\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Content-Type\")]),t._v(\" \"),s(\"td\",[t._v(\"实体主体的媒体类型\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Expires\")]),t._v(\" \"),s(\"td\",[t._v(\"实体主体过期的日期时间\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"Last-Modified\")]),t._v(\" \"),s(\"td\",[t._v(\"资源的最后修改日期时间\")])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"确保web安全的-https\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#确保web安全的-https\"}},[t._v(\"#\")]),t._v(\" 确保\"),s(\"strong\",[t._v(\"Web\")]),t._v(\"安全的 \"),s(\"strong\",[t._v(\"HTTPS\")])]),t._v(\" \"),s(\"p\",[t._v(\"在 HTTP 协议中有可能存在信息窃听或身份伪装等安全问题。使用 HTTPS 通信机制可以有效地防止这些问题。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-的缺点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-的缺点\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 的缺点\")]),t._v(\" \"),s(\"p\",[t._v(\"到现在为止，我们已了解到 HTTP 具有相当优秀和方便的一面，然而\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 并非只有好的一面，事物皆具两面性，它也是有不足之处的。 HTTP 主要有这些不足，例举如下。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"通信使用明文(不加密)，内容可能会被窃听\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"不验证通信方的身份，因此有可能遭遇伪装\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"无法证明报文的完整性，所以有可能已遭篡改\")])])]),t._v(\" \"),s(\"p\",[t._v(\"这些问题不仅在 HTTP 上出现，其他未加密的协议中也会存在这类问 题。\")]),t._v(\" \"),s(\"p\",[t._v(\"除此之外，HTTP 本身还有很多缺点。而且，还有像某些特定的 Web 服务器和特定的 Web 浏览器在实际应用中存在的不足(也可以说成 是脆弱性或安全漏洞)，另外，用 Java 和 PHP 等编程语言开发的 Web 应用也可能存在安全漏洞。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"通信使用明文可能会被窃听\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通信使用明文可能会被窃听\"}},[t._v(\"#\")]),t._v(\" 通信使用明文可能会被窃听\")]),t._v(\" \"),s(\"p\",[t._v(\"由于 HTTP 本身不具备加密的功能，所以也无法做到对通信整体(使 用 HTTP 协议通信的请求和响应的内容)进行加密。即，HTTP 报文 使用明文(指未经过加密的报文)方式发送。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"TCP/IP\")]),t._v(\" 是可能被窃听的网络\")]),t._v(\" \"),s(\"li\",[t._v(\"加密处理防止被窃听(用SSL加密HTTP的通信内容)\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"不验证通信方的身份就可能遭遇伪装\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#不验证通信方的身份就可能遭遇伪装\"}},[t._v(\"#\")]),t._v(\" 不验证通信方的身份就可能遭遇伪装\")]),t._v(\" \"),s(\"p\",[t._v(\"在 HTTP 协议通信时，由于不存在确认通信方的处理步骤，任何 人都可以发起请求。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-950fc1c7ddd64f7c825a96c176068dd9_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议的实现本身非常简单，不论是谁发送过来的请求都会 返回响应，因此不确认通信方，则会存在很多隐患。\")]),t._v(\" \"),s(\"p\",[t._v(\"这个时候我们就需要查明对手的证书，虽然使用 HTTP 协议无法确定通信方，但如果使用 SSL 则可以。 SSL 不仅提供加密处理，而且还使用了一种被称为证书的手段， 可用于确定方。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-27a82733fb3861146b4e197921db98ef_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"无法证明报文完整性，可能已遭篡改\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#无法证明报文完整性，可能已遭篡改\"}},[t._v(\"#\")]),t._v(\" 无法证明报文完整性，可能已遭篡改\")]),t._v(\" \"),s(\"p\",[t._v(\"所谓完整性是指信息的准确度。若无法证明其完整性，通常也就意味 着无法判断信息是否准确。为了有效防止这些弊端，有必要使用 HTTPS。SSL 提供认证和加 密处理及摘要功能。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-加密-认证-完整性保护-https\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-加密-认证-完整性保护-https\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"HTTP+\")]),t._v(\" 加密 \"),s(\"strong\",[t._v(\"+\")]),t._v(\" 认证 \"),s(\"strong\",[t._v(\"+\")]),t._v(\" 完整性保护 \"),s(\"strong\",[t._v(\"=HTTPS\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-db19957bef4d96c55e40c84a0f6b3a72_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用 SSL(Secure Socket Layer)和 TLS(Transport Layer Security)协议代 替而已。\")]),t._v(\" \"),s(\"p\",[t._v(\"通常，HTTP 直接和 TCP 通信。当使用 SSL 时，则演变成先和 SSL 通 信，再由 SSL 和 TCP 通信了。简言之，所谓 HTTPS，其实就是身披 SSL 协议这层外壳的 HTTP。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-422f3c216203df47118b6e0675e7d049_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"在采用 SSL 后，HTTP 就拥有了 HTTPS 的加密、证书和完整性保护 这些功能。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"为什么不一直使用-https\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么不一直使用-https\"}},[t._v(\"#\")]),t._v(\" 为什么不一直使用 HTTPS\")]),t._v(\" \"),s(\"p\",[t._v(\"其中一个原因是，因为与纯文本通信相比，加密通信会消耗更多的 CPU 及内存资源。如果每次通信都加密，会消耗相当多的资源，平 摊到一台计算机上时，能够处理的请求数量必定也会随之减少。特别是每当那些访问量较多的 Web 网站在进行加密处理时，它们 所承担着的负载不容小觑。在进行加密处理时，并非对所有内容都 进行加密处理，而是仅在那些需要信息隐藏时才会加密，以节约资 源。\")]),t._v(\" \"),s(\"p\",[t._v(\"除此之外，想要节约购买证书的开销也是原因之一。\")]),t._v(\" \"),s(\"p\",[t._v(\"要进行 HTTPS 通信，证书是必不可少的。而使用的证书必须向认 证机构(CA)购买。证书价格可能会根据不同的认证机构略有不 同。对于个人开发者，或许小型团队来讲，话额外的钱购买https证书并不合算。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"确认访问用户身份的认-证\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#确认访问用户身份的认-证\"}},[t._v(\"#\")]),t._v(\" 确认访问用户身份的认 证\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"何为认证\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#何为认证\"}},[t._v(\"#\")]),t._v(\" 何为认证\")]),t._v(\" \"),s(\"p\",[t._v(\"计算机本身无法判断坐在显示器前的使用者的身份。进一步说，也无 法确认网络的那头究竟有谁。可见，为了弄清究竟是谁在访问服务 器，就得让对方的客户端自报家门。\")]),t._v(\" \"),s(\"p\",[t._v(\"可是，就算正在访问服务器的对方声称自己是ueno，身份是否属实这 点却也无从谈起。为确认 ueno 本人是否真的具有访问系统的权限， 就需要核对“登录者本人才知道的信息”、“登录者本人才会有的信 息”。\")]),t._v(\" \"),s(\"p\",[t._v(\"核对的信息通常是指以下这些。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"密码:只有本人才会知道的字符串信息。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"动态令牌:仅限本人持有的设备内显示的一次性密码。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"数字证书:仅限本人(终端)持有的信息。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"生物认证:指纹和虹膜等本人的生理信息。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"IC卡等:仅限本人持有的信息。\")])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-使用的认证方式\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-使用的认证方式\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 使用的认证方式\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"BASIC 认证(基本认证)\")]),t._v(\" \"),s(\"li\",[t._v(\"DIGEST 认证(摘要认证)\")]),t._v(\" \"),s(\"li\",[t._v(\"SSL客户端认证\")]),t._v(\" \"),s(\"li\",[t._v(\"FormBase认证(基于表单认证)\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"web-的攻击技术\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#web-的攻击技术\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"Web\")]),t._v(\" 的攻击技术\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 就是一个通用的单纯协议机制。简单的 HTTP 协议本身并不存在安全性问题，因此协议本身几乎不会 成为攻击的对象。应用 HTTP 协议的服务器和客户端，以及运行在服 务器上的 Web 应用等资源才是攻击目标。\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"在客户端即可篡改请求\")])]),t._v(\" \"),s(\"p\",[t._v(\"在 HTTP 请求报文内加载攻击代码，就能发起对 Web 应用的攻击。 通过 URL 查询字段或表单、HTTP 首部、Cookie 等途径把攻击代码传 入，若这时 Web 应用存在安全漏洞，那内部信息就会遭到窃取，或 被攻击者拿到管理权限。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"针对 Web应用的攻击模式\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"主动攻击：主动攻击(active attack)是指攻击者通过直接访问 Web 应用， 把攻击代码传入的攻击模式。由于该模式是直接针对服务器上的 资源进行攻击，因此攻击者需要能够访问到那些资源。主动攻击模式里具有代表性的攻击是 SQL 注入攻击和 OS 命令注 入攻击。\")]),t._v(\" \"),s(\"li\",[t._v(\"被动攻击：被动攻击(passive attack)是指利用圈套策略执行攻击代码的攻 击模式。在被动攻击过程中，攻击者不直接对目标 Web 应用访 问发起攻击。被动攻击模式中具有代表性的攻击是跨站脚本攻击和跨站点请求 伪造。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"因会话管理疏忽引发的安全漏洞\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"会话劫持：会话劫持(Session Hijack)是指攻击者通过某种手段拿到了用户的会 话 ID，并非法使用此会话 ID 伪装成用户，达到攻击的目的。\")]),t._v(\" \"),s(\"li\",[t._v(\"跨站点请求伪造：跨站点请求伪造(Cross-Site Request Forgeries，CSRF)攻击是指攻击 者通过设置好的陷阱，强制对已完成认证的用户进行非预期的个人信 息或设定信息等某些状态更新，属于被动攻击。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"其他安全漏洞\")])]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"密码破解：密码破解攻击(Password Cracking)即算出密码，突破认证。攻击不 仅限于 Web 应用，还包括其他的系统(如 FTP 或 SSH 等)，本节将 会讲解对具备认证功能的 Web 应用进行的密码破解。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"点击劫持：点击劫持(Clickjacking)是指利用透明的按钮或链接做成陷阱，覆盖 在 Web 页面之上。然后诱使用户在不知情的情况下，点击那个链接 访问内容的一种攻击手段。这种行为又称为界面伪装(UI Redressing)。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"DoS\")]),t._v(\" 攻击：DoS 攻击(Denial of Service attack)是一种让运行中的服务呈停止状 态的攻击。有时也叫做服务停止攻击或拒绝服务攻击。DoS 攻击的对 象不仅限于 Web 网站，还包括网络设备及服务器等。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"后门程序：后门程序(Backdoor)是指开发设置的隐藏入口，可不按正常步骤使\")]),t._v(\" \"),s(\"p\",[t._v(\"用受限功能。利用后门程序就能够使用原本受限制的功能。\")])])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"ajax和websocket\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ajax和websocket\"}},[t._v(\"#\")]),t._v(\" ajax和websocket\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-的瓶颈\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-的瓶颈\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 的瓶颈\")]),t._v(\" \"),s(\"p\",[t._v(\"在 Facebook 和 Twitter 等 SNS 网站上，几乎能够实时观察到海量用户 公开发布的内容，这也是一种乐趣。当几百、几千万的用户发布内容 时，Web 网站为了保存这些新增内容，在很短的时间内就会发生大量 的内容更新。\")]),t._v(\" \"),s(\"p\",[t._v(\"为了尽可能实时地显示这些更新的内容，服务器上一有内容更新，就 需要直接把那些内容反馈到客户端的界面上。虽然看起来挺简单的， 但 HTTP 却无法妥善地处理好这项任务。\")]),t._v(\" \"),s(\"p\",[t._v(\"使用 HTTP 协议探知服务器上是否有内容更新，就必须频繁地从客户 端到服务器端进行确认。如果服务器上没有内容更新，那么就会产生 徒劳的通信。\")]),t._v(\" \"),s(\"p\",[t._v(\"若想在现有 Web 实现所需的功能，以下这些 HTTP 标准就会成为瓶 颈。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"一条连接上只可发送一个请求。\")]),t._v(\" \"),s(\"li\",[t._v(\"请求只能从客户端开始。客户端不可以接收除响应以外的指 令。\")]),t._v(\" \"),s(\"li\",[t._v(\"请求 \"),s(\"strong\",[t._v(\"/\")]),t._v(\" 响应首部未经压缩就发送。首部信息越多延迟越大。\")]),t._v(\" \"),s(\"li\",[t._v(\"发送冗长的首部。每次互相发送相同的首部造成的浪费较 多。\")]),t._v(\" \"),s(\"li\",[t._v(\"可任意选择数据压缩格式。非强制压缩发送。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"ajax-的解决方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#ajax-的解决方法\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"Ajax\")]),t._v(\" 的解决方法\")]),t._v(\" \"),s(\"p\",[t._v(\"Ajax(Asynchronous JavaScript and XML， 异 步 JavaScript 与 XML 技 术)是一种有效利用 JavaScript 和 DOM(Document Object Model，文 档对象模型)的操作，以达到局部 Web 页面替换加载的异步通信手 段。和以前的同步通信相比，由于它只更新一部分页面，响应中传输 的数据量会因此而减少，这一优点显而易见。\")]),t._v(\" \"),s(\"p\",[t._v(\"Ajax 的核心技术是名为 XMLHttpRequest 的 API，通过 JavaScript 脚本 语言的调用就能和服务器进行 HTTP 通信。借由这种手段，就能从已 加载完毕的 Web 页面上发起请求，只更新局部页面。\")]),t._v(\" \"),s(\"p\",[t._v(\"而利用 Ajax 实时地从服务器获取内容，有可能会导致大量请求产 生。另外，Ajax 仍未解决 HTTP 协议本身存在的问题。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"websocket\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#websocket\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"WebSocket\")])]),t._v(\" \"),s(\"p\",[t._v(\"利用 Ajax 和 Comet 技术进行通信可以提升 Web 的浏览速度。但问题 在于通信若使用 HTTP 协议，就无法彻底解决瓶颈问题。WebSocket 网络技术正是为解决这些问题而实现的一套新协议及 API。\")]),t._v(\" \"),s(\"p\",[t._v(\"当时筹划将 WebSocket 作为 HTML5 标准的一部分，而现在它却逐渐 变成了独立的协议标准。WebSocket 通信协议在 2011 年 12 月 11 日， 被 RFC 6455 - The WebSocket Protocol 定为标准。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"websocket-的设计与功能\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#websocket-的设计与功能\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"WebSocket\")]),t._v(\" 的设计与功能\")]),t._v(\" \"),s(\"p\",[t._v(\"WebSocket，即 Web 浏览器与 Web 服务器之间全双工通信标准。其 中，WebSocket 协议由 IETF 定为标准，WebSocket API 由 W3C 定为 标准。仍在开发中的 WebSocket 技术主要是为了解决 Ajax 和 Comet 里 XMLHttpRequest 附带的缺陷所引起的问题。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"websocket-协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#websocket-协议\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"WebSocket\")]),t._v(\" 协议\")]),t._v(\" \"),s(\"p\",[t._v(\"一旦 Web 服务器与客户端之间建立起 WebSocket 协议的通信连接， 之后所有的通信都依靠这个专用协议进行。通信过程中可互相发送 JSON、XML、HTML 或图片等任意格式的数据。\")]),t._v(\" \"),s(\"p\",[t._v(\"由于是建立在 HTTP 基础上的协议，因此连接的发起方仍是客户端， 而一旦确立 WebSocket 通信连接，不论服务器还是客户端，任意一方 都可直接向对方发送报文。\")]),t._v(\" \"),s(\"p\",[t._v(\"下面我们列举一下 WebSocket 协议的主要特点。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"推送功能\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#推送功能\"}},[t._v(\"#\")]),t._v(\" 推送功能\")]),t._v(\" \"),s(\"p\",[t._v(\"支持由服务器向客户端推送数据的推送功能。这样，服务器可直接发 送数据，而不必等待客户端的请求。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"减少通信量\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#减少通信量\"}},[t._v(\"#\")]),t._v(\" 减少通信量\")]),t._v(\" \"),s(\"p\",[t._v(\"只要建立起 WebSocket 连接，就希望一直保持连接状态。和 HTTP 相 比，不但每次连接时的总开销减少，而且由于 WebSocket 的首部信息 很小，通信量也相应减少了。\")]),t._v(\" \"),s(\"p\",[t._v(\"为了实现 WebSocket 通信，在 HTTP 连接建立之后，需要完成一 次“握手”(Handshaking)的步骤。\")]),t._v(\" \"),s(\"p\",[t._v(\"为了实现 WebSocket 通信，需要用到 HTTP 的 Upgrade 首部字段，告知服务器通信协议发生改变，以达到握手的目的。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"chat \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\nHost\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" server\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"example\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"com\\nUpgrade\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" websocket\\nConnection\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Upgrade\\nSec\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"WebSocket\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Key\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" dGhlIHNhbXBsZSBub25jZQ\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" Origin\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" http\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"example\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"com Sec\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"WebSocket\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Protocol\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" chat\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" superchat Sec\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"WebSocket\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Version\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"13\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"Sec-WebSocket-Key 字段内记录着握手过程中必不可少的键值。 Sec-WebSocket-Protocol 字段内记录使用的子协议。\")]),t._v(\" \"),s(\"p\",[t._v(\"子协议按 WebSocket 协议标准在连接分开使用时，定义那些连接 的名称。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"握手-·-响应\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#握手-·-响应\"}},[t._v(\"#\")]),t._v(\" 握手**·**响应\")]),t._v(\" \"),s(\"p\",[t._v(\"对于之前的请求，返回状态码 101 Switching Protocols 的响应。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"101\")]),t._v(\" Switching Protocols\\nUpgrade\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" websocket\\nConnection\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Upgrade\\nSec\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"WebSocket\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Accept\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" s3pPLMBiTxaQ9kYGzzhZRbK\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\"xOo\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" Sec\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"WebSocket\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Protocol\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" chat\\n\")])])]),s(\"p\",[t._v(\"Sec-WebSocket-Accept 的字段值是由握手请求中的 Sec- WebSocket-Key 的字段值生成的。\")]),t._v(\" \"),s(\"p\",[t._v(\"成功握手确立 WebSocket 连接之后，通信时不再使用 HTTP 的数 据帧，而采用 WebSocket 独立的数据帧。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-5f7581252fbc8d5162a477c3120ed909_1440w.png\",alt:\"websocket\"}})]),t._v(\" \"),s(\"p\",[t._v(\"以下为调用 WebSocket API，每 50ms 发送一次数据的实例。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"var\")]),t._v(\" socket \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"WebSocket\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"'ws\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"game\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"example\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"com\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"12010\")]),t._v(\" socket\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function-variable function\"}},[t._v(\"onopen\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"setInterval\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"function\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"socket\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"bufferedAmount \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"0\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\nsocket\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"send\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getUpdateData\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"50\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),s(\"h2\",{attrs:{id:\"期盼已久的-http-2-0\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#期盼已久的-http-2-0\"}},[t._v(\"#\")]),t._v(\" 期盼已久的 \"),s(\"strong\",[t._v(\"HTTP/2.0\")])]),t._v(\" \"),s(\"p\",[t._v(\"目前主流的 HTTP/1.1 标准，自 1999 年发布的 RFC2616 之后再未进 行过改订。SPDY 和 WebSocket 等技术纷纷出现，很难断言 HTTP/1.1 仍是适用于当下的 Web 的协议。\")]),t._v(\" \"),s(\"p\",[t._v(\"负责互联网技术标准的 IETF(Internet Engineering Task Force，互联网 工程任务组)创立 httpbis(Hypertext Transfer Protocol Bis，http://datatracker.ietf.org/wg/httpbis/)工作组，其目标是推进下一 代 HTTP——HTTP/2.0 在 2014 年 11 月实现标准化。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-2-0-的特点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-2-0-的特点\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"HTTP/2.0\")]),t._v(\" 的特点\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/2.0 的目标是改善用户在使用 Web 时的速度体验。由于基本上 都会先通过 HTTP/1.1 与 TCP 连接，现在我们以下面的这些协议为基 础，探讨一下它们的实现方法。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"SPDY\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"HTTPSpeed\")]),t._v(\"+\"),s(\"strong\",[t._v(\"Mobility\")])]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"Network-Friendly HTTP Upgrade\")])])]),t._v(\" \"),s(\"p\",[t._v(\"HTTP Speed + Mobility 由微软公司起草，是用于改善并提高移动端 通信时的通信速度和性能的标准。它建立在 Google 公司提出的 SPDY 与 WebSocket 的基础之上。\")]),t._v(\" \"),s(\"p\",[t._v(\"Network-Friendly HTTP Upgrade 主要是在移动端通信时改善 HTTP 性 能的标准。\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"压缩\")]),t._v(\" \"),s(\"th\",[t._v(\"SPDY、Frie ndly\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"多路复用\")]),t._v(\" \"),s(\"td\",[t._v(\"SPDY\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"TLS义务化\")]),t._v(\" \"),s(\"td\",[t._v(\"Speed+Mobility\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"协商\")]),t._v(\" \"),s(\"td\",[t._v(\"Speed+Mobility，Friendly\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"客户端拉曳(Client Pull)/服务器推送 (Server Push)\")]),t._v(\" \"),s(\"td\",[t._v(\"Speed+ Mobility\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"流量控制\")]),t._v(\" \"),s(\"td\",[t._v(\"SPDY\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"WebSocket\")]),t._v(\" \"),s(\"td\",[t._v(\"Speed+Mobility\")])])])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"注:HTTP Speed + Mobility 简写为 Speed + Mobility，Network-Friendly HTTP\")]),t._v(\" \"),s(\"p\",[t._v(\"Upgrade 简写为 Friendly。\")])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"了解http0-9-http3\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#了解http0-9-http3\"}},[t._v(\"#\")]),t._v(\" 了解HTTP0.9~HTTP3\")]),t._v(\" \"),s(\"p\",[t._v(\"在 30 多年的历史中，HTTP 协议本身有比较大的发展，同时，还有一些重大的变动也在酝酿之中。这些演化使得这个协议的表现力更强，性能更好，更能满足日新月异的应用需求。本文就来回顾和展望一下 HTTP 的历史和未来。\")]),t._v(\" \"),s(\"p\",[t._v(\"下面我会介绍：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"HTTP/0.9\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP/1.0\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP/1.1\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP/2\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP/3\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-0-9\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-0-9\"}},[t._v(\"#\")]),t._v(\" HTTP 0.9\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP0.9诞生于1991年，是HTTP协议的最初版，构建十分简单：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"请求端只支持GET请求\")]),t._v(\" \"),s(\"li\",[t._v(\"相应端只能返回HTML文件数据\")])]),t._v(\" \"),s(\"p\",[t._v(\"请求：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-http extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-http\"}},[s(\"code\",[t._v(\"GET /index.html\\n\")])])]),s(\"p\",[t._v(\"返回：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-html extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-html\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"html\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"body\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    Hello World\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"body\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"html\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"画图：后面补\")]),t._v(\" \"),s(\"p\",[t._v(\"可以看到，HTTP/0.9 只能发送 GET 请求，且每一个请求都单独创建一个 TCP 连接，响应端只能返回 HTML 格式的数据，响应完成之后 TCP 请求断开。\")]),t._v(\" \"),s(\"p\",[t._v(\"这样的请求方式虽然能够满足当时的使用需求，但也还是暴露出了一些问题。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/0.9 痛点：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"请求方式唯一，返回格式唯一\")]),t._v(\" \"),s(\"li\",[t._v(\"TCP 连接无法复用\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http1-0\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http1-0\"}},[t._v(\"#\")]),t._v(\" HTTP1.0\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/1.0 诞生于 \"),s(\"a\",{attrs:{href:\"https://www.w3.org/Protocols/HTTP/1.0/spec.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"1996\"),s(\"OutboundLink\")],1),t._v(\" 年，它在 HTTP/0.9 的基础上，增加了 HTTP 头部字段，极大扩展了 HTTP 的使用场景。这个版本的 HTTP 不仅可以传输文字，还能传输图像、视频、二进制文件，为互联网的迅速发展奠定了坚实的基础。\")]),t._v(\" \"),s(\"p\",[t._v(\"核心特点如下：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"请求端增加 HTTP 协议版本，响应端增加状态码。\")]),t._v(\" \"),s(\"li\",[t._v(\"请求方法增加 POST、HEAD。\")]),t._v(\" \"),s(\"li\",[t._v(\"请求端和响应端增加头部字段。\\n\"),s(\"ul\",[s(\"li\",[t._v(\"Content-Type 让响应数据不只限于超文本。\")]),t._v(\" \"),s(\"li\",[t._v(\"Expires、Last-Modified 缓存头。\")]),t._v(\" \"),s(\"li\",[t._v(\"Authorization 身份认证。\")]),t._v(\" \"),s(\"li\",[t._v(\"Connection: keep-alive 支持长连接，但非标准。\")])])])]),t._v(\" \"),s(\"p\",[t._v(\"请求：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-http extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-http\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token request-line\"}},[s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v(\"GET\")]),t._v(\" /mypage.html HTTP/1.0\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"User-Agent:\")]),t._v(\" NCSA_Mosaic/2.0 (Windows 3.1)\\n\")])])]),s(\"p\",[t._v(\"响应头：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-http extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-http\"}},[s(\"code\",[t._v(\"200 OK\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Date:\")]),t._v(\" Tue, 15 Nov 1994 08:12:31 GMT\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Server:\")]),t._v(\" CERN/3.0 libwww/2.17\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Content-Type:\")]),t._v(\" text/html\\n\")])])]),s(\"p\",[t._v(\"相应实体：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-html extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-html\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"html\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"body\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    Hello World\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"body\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"html\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"画图：请求过程图。后期补充\")]),t._v(\" \"),s(\"p\",[t._v(\"通过上面的过程我们可以看到，HTTP1.0拓展了请求方法和响应状态码，并且支持定义HTTP头部字段，通过\"),s(\"code\",[t._v(\"Content-Type\")]),t._v(\"配置，我们就能传输任何数据类型了。通过，HTTP1.0任然是一个请求对一个TCP链接，不能形成复用。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/1.0 痛点：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"TCP 连接无法复用。\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP 队头阻塞，一个 HTTP 请求响应结束之后，才能发起下一个 HTTP 请求。\")]),t._v(\" \"),s(\"li\",[t._v(\"一台服务器只能提供一个 HTTP 服务。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http1-1\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http1-1\"}},[t._v(\"#\")]),t._v(\" HTTP1.1\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP1.1诞生于1999年，它进一步完善了HTTP协议，一直到了20年后的今天，任然是使用最广的HTTP版本。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP1.1核心特点如下：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"持久连接。\\n\"),s(\"ul\",[s(\"li\",[t._v(\"HTTP/1.1 默认开启持久连接，在 TCP 连接建立后不立即关闭，让多个 HTTP 请求得以复用。\")])])]),t._v(\" \"),s(\"li\",[t._v(\"管线化技术。\\n\"),s(\"ul\",[s(\"li\",[t._v(\"HTTP/1.1 中，多个 HTTP 请求不用排队发送，可以批量发送，这就解决了 HTTP 队头阻塞问题。但批量发送的 HTTP 请求，必须按照发送的顺序返回响应，相当于问题解决了一半，仍然不是最佳体验。\")])])]),t._v(\" \"),s(\"li\",[t._v(\"支持响应分块。\\n\"),s(\"ul\",[s(\"li\",[t._v(\"HTTP/1.1 实现了流式渲染，响应端可以不用一次返回所有数据，可以将数据拆分成多个模块，产生一块数据，就发送一块数据，这样客户端就可以同步对数据进行处理，减少响应延迟，降低白屏时间。\")]),t._v(\" \"),s(\"li\",[t._v(\"Bigpipe 的实现就是基于这个特性，具体是通过定义 \"),s(\"code\",[t._v(\"Transfer-Encoding\")]),t._v(\" 头来实现的。\")])])]),t._v(\" \"),s(\"li\",[t._v(\"增加 Host 头。\\n\"),s(\"ul\",[s(\"li\",[t._v(\"HTTP/1.1 实现了虚拟主机技术，将一台服务器分成若干个主机，这样就可以在一台服务器上部署多个网站了。\")]),t._v(\" \"),s(\"li\",[t._v(\"通过配置 Host 的域名和端口号，即可支持多个 HTTP 服务： \"),s(\"code\",[t._v(\"Host: <domain>:<port>\")])])])]),t._v(\" \"),s(\"li\",[t._v(\"其他扩展。\\n\"),s(\"ul\",[s(\"li\",[t._v(\"增加 Cache-Control、E-Tag 缓存头。\")]),t._v(\" \"),s(\"li\",[t._v(\"增加 PUT、PATCH、HEAD、 OPTIONS、DELETE 请求方法。\")])])])]),t._v(\" \"),s(\"p\",[t._v(\"请求头：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-http extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-http\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token request-line\"}},[s(\"span\",{pre:!0,attrs:{class:\"token property\"}},[t._v(\"GET\")]),t._v(\" /en-US/docs/Glossary/Simple_header HTTP/1.1\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Host:\")]),t._v(\" developer.mozilla.org\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"User-Agent:\")]),t._v(\" Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Accept:\")]),t._v(\" text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Accept-Language:\")]),t._v(\" en-US,en;q=0.5\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Accept-Encoding:\")]),t._v(\" gzip, deflate, br\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Referer:\")]),t._v(\" https://developer.mozilla.org/en-US/docs/Glossary/Simple_header\\n\")])])]),s(\"p\",[t._v(\"响应头：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-http extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-http\"}},[s(\"code\",[t._v(\"200 OK\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Connection:\")]),t._v(\" Keep-Alive\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Content-Encoding:\")]),t._v(\" gzip\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Content-Type:\")]),t._v(\" text/html; charset=utf-8\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Date:\")]),t._v(\" Wed, 20 Jul 2016 10:55:30 GMT\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Etag:\")]),t._v(' \"547fa7e369ef56031dd3bff2ace9fc0832eb251a\"\\n'),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Keep-Alive:\")]),t._v(\" timeout=5, max=1000\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Last-Modified:\")]),t._v(\" Tue, 19 Jul 2016 00:59:33 GMT\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Server:\")]),t._v(\" Apache\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Transfer-Encoding:\")]),t._v(\" chunked\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token header-name keyword\"}},[t._v(\"Vary:\")]),t._v(\" Cookie, Accept-Encoding\"),s(\"span\",{pre:!0,attrs:{class:\"token text-html\"}},[t._v(\"\\n\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"html\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"body\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    Hello World\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"body\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"html\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])])]),s(\"p\",[t._v(\"响应实体：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-html extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-html\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"html\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"body\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n    Hello World\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"body\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"</\")]),t._v(\"html\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"图片后期补\")]),t._v(\" \"),s(\"p\",[t._v(\"可以看到，HTTP/1.1 可以并行发起多个请求，并且也能复用同一个 TCP 连接，传输效率得到了提升。但响应端只能按照发送的顺序进行返回，为此很多浏览器会为每个域名至多打开 6 个连接，用增加队列的方式减少 HTTP 队头阻塞。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/1.1 痛点：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"HTTP 队头阻塞没有彻底解决，响应端必须按照 HTTP 的发送顺序进行返回，如果排序靠前的响应特别耗时，则会阻塞排序靠后的所有响应。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http2\"}},[t._v(\"#\")]),t._v(\" HTTP2\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/2 诞生于 \"),s(\"a\",{attrs:{href:\"https://tools.ietf.org/html/rfc7540\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"2015\"),s(\"OutboundLink\")],1),t._v(\" 年，它的最大的特点是 All in 二进制，基于二进制的特性，对 HTTP 传输效率进行了深度优化。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/2 将一个 HTTP 请求划分为 3 个部分：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"帧：一段二进制数据，是 HTTP/2 传输的最小单位。\")]),t._v(\" \"),s(\"li\",[t._v(\"消息：一个请求或响应对应的一个或多个帧。\")]),t._v(\" \"),s(\"li\",[t._v(\"数据流：已建立的连接内的双向字节流，可以承载一条或多条消息。\")])]),t._v(\" \"),s(\"p\",[t._v(\"TODO：多路复用请求图，后期补\")]),t._v(\" \"),s(\"p\",[t._v(\"图中可以看到，一个 TCP 连接上有多个数据流，一个数据流承载着双向消息，一条消息包含了多个帧，每个帧都有唯一的标识，指向所在的数据流，来自不同数据流的帧可以交错发送，然后再根据每个帧头的数据流标识符重新组装，这样就实现了数据传输。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/2 核心特点如下：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"请求优先级\\n\"),s(\"ul\",[s(\"li\",[t._v(\"多个 HTTP 请求同时发送时，会产生多个数据流，数据流中有一个优先级的标识，服务器端可以根据这个标识来决定响应的优先顺序。\")])])]),t._v(\" \"),s(\"li\",[t._v(\"多路复用\\n\"),s(\"ul\",[s(\"li\",[t._v(\"TCP 传输时，不用按照 HTTP 的发送顺序进行响应，可以交错发送，接收端根据帧首部的标识符，就能找到对应的流，进而重新组合得到最终数据。\")])])]),t._v(\" \"),s(\"li\",[t._v(\"服务器端推送\\n\"),s(\"ul\",[s(\"li\",[t._v(\"HTTP/2 允许服务器未经请求，主动向客户端发送资源，并缓存到客户端中，以避免二次请求。\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP/1.1 中请求一个页面时，浏览器会先发送一个 HTTP 请求，然后得到响应的 HTML 内容并开始解析，如果发现有 \"),s(\"code\",[t._v('<script src=\"xxxx.js\">')]),t._v(\" 标签，则会再次发起 HTTP 请求获取对应的 JS 内容。而 HTTP/2 可以在返回 HTML 的同时，将需要用到的 JS、CSS 等内容一并返回给客户端，当浏览器解析到对应标签时，也就不需要再次发起请求了。\")])])]),t._v(\" \"),s(\"li\",[t._v(\"头部压缩\\n\"),s(\"ul\",[s(\"li\",[t._v(\"HTTP/1.1 的头部字段包含大量信息，而且每次请求都得带上，占用了大量的字节。\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP/2.0 中通信双方各自缓存一份头部字段表，如：把 \"),s(\"code\",[t._v(\"Content-Type:text/html\")]),t._v(\" 存入索引表中，后续如果要用到这个头，只需要发送对应的索引号就可以了。\")])])])]),t._v(\" \"),s(\"p\",[t._v(\"TODO：请求图，后期补\")]),t._v(\" \"),s(\"p\",[t._v(\"可以看到，在 HTTP/2 中发送请求时，既不需要排队发送，也不需要排队返回，彻底解决了 HTTP 队头阻塞问题。对于头部信息，资源缓存等痛点也进行了优化，似乎已经是一种很完美的方案了。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/2 在 HTTP + TCP 的架构上已经优化到了极致，如果要想继续优化，那就只能从这个架构入手了。\")]),t._v(\" \"),s(\"p\",[t._v(\"首先需要优化的是 TCP，因为 TCP 核心是保证传输层的可靠性，传输效率其实并不好。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"TCP 也存在队头阻塞，TCP 在传输时使用序列号标识数据的顺序，一旦某个数据丢失，后面的数据需要等待这个数据重传后才能进行下一步处理。\")]),t._v(\" \"),s(\"li\",[t._v(\"TCP 每一次建立都需要三次握手，释放连接需要四次挥手，无形中增加了传输时长。\")]),t._v(\" \"),s(\"li\",[t._v(\"TCP 存在拥塞控制，内置了慢启动，拥塞避免等算法，传输效率并不稳定。\")])]),t._v(\" \"),s(\"p\",[t._v(\"如果要解决这些问题，就需要替换掉 TCP，而这也是 HTTP/3 的解决思路，我们接着往下看。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http3\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http3\"}},[t._v(\"#\")]),t._v(\" HTTP3\")]),t._v(\" \"),s(\"p\",[t._v(\"它的主要特点是对传输层进行了优化，使用 QUIC 替换 TCP，彻底规避了 TCP 传输的效率问题。\")]),t._v(\" \"),s(\"p\",[t._v(\"QUIC 由 Google 提出的基于 UDP 进行多路复用的传输协议。QUIC 没有连接的概念，不需要三次握手，在应用程序层面，实现了 TCP 的可靠性，TLS 的安全性和 HTTP2 的并发性。在设备支持层面，只需要客户端和服务端的应用程序支持 QUIC 协议即可，无操作系统和中间设备的限制。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP3的核心特点如下：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"传输层连接更快\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"HTTP/3 基于 QUIC 协议，可以实现 0-RTT 建立连接，而 TCP 需要 3-RTT 才能建立连接。\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/942057ba62f4421e8a504e93b4470ebb~tplv-k3u1fbpfcp-zoom-1.image?imageslim\",alt:\"img\"}})])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"传输层多路复用\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"HTTP/3 传输层使用 QUIC 协议，数据在传输时会被拆分成了多个 packet 包，每一个 packet 包都可以独立、交错发送，不用按顺序发送，也就避免了 TCP 队头阻塞。\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc73576322644c91a5ec801a9ede9f3f~tplv-k3u1fbpfcp-zoom-1.image?imageslim\",alt:\"img\"}})])])]),t._v(\" \"),s(\"p\",[t._v(\"上图中的 Stream 之间相互独立，如果 Stream2 丢了一个 Pakcet，不会影响 Stream3 和 Stream4 正常读取。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"改进的拥塞控制\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"单调递增的 Packet Number\")]),t._v(\"。在 TCP 中，每一个数据包都有一个序列号标识（seq），如果接收端超时没有收到，就会要求重发标识为 seq 的包，如果这时超时的包也接收到了，则无法区分哪个是超时的包，哪个是重传的包。QUIC 中的每一个包的标识（Packet Number）都是单调递增的，重传的 Packet Number 一定大于超时的 Packet Number，这样就能区分开了。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"不允许 Reneging\")]),t._v(\"。在 TCP 中，如果接收方内存不够或 Buffer 溢出，则可能会把已接收的包丢弃（Reneging），这种行为对数据重传产生了很大的干扰，在 QUIC 中是明确禁止的。在 QUIC 中，一个包只要被确认，就一定是被正确接收了。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"更多的 ACK 块\")]),t._v(\"。一般来说，接收方收到发送方的消息后都会发送一个 ACK 标识，表示收到了数据。但每收到一个数据就发送一个 ACK 效率太低了，通常是收到多个数据后再统一回复 ACK。TCP 中每收到 3 个数据包就要返回一个 ACK，而 QUIC 最多可以收到 256 个包之后，才返回 ACK。在丢包率比较严重的网络下，更多的 ACK 块可以减少重传量，提升网络效率。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[s(\"strong\",[t._v(\"Ack Delay\")]),t._v(\"。TCP 计算 RTT 时没有考虑接收方处理数据的延迟，如下图所示，这段延迟即 ACK Delay。QUIC 考虑了这段延迟，使得 RTT 的计算更加准确。\")])])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/201a0c1019c34366b5a387bce7ce4450~tplv-k3u1fbpfcp-zoom-1.image?imageslim\",alt:\"img\"}})])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"优化的流量控制\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"TCP 通过滑动窗口来控制流量，如果某一个包丢失了，滑动窗口并不能跨过丢失的包继续滑动，而是会卡在丢失的位置，等待数据重传后，才能继续滑动。\")]),t._v(\" \"),s(\"li\",[t._v(\"QUIC 流量控制的核心是：\"),s(\"strong\",[t._v(\"不能建立太多的连接，以免响应端处理不过来；不能让某一个连接占用大量的资源，让其他连接没有资源可用\")]),t._v(\"。为此 QUIC 流量控制分为 2 个级别：连接级别（Connection Level）和 Stream 级别（Stream Level）。\\n\"),s(\"ul\",[s(\"li\",[t._v(\"Stream 级别的流量控制中，\"),s(\"code\",[t._v(\"接收窗口 = 最大接收窗口- 已接收数据\")]),t._v(\"。\")]),t._v(\" \"),s(\"li\",[t._v(\"Connection 级别的流量控制中，\"),s(\"code\",[t._v(\"接收窗口 = Stream1接收窗口 + Stream2接收窗口 + ... + StreamN接收窗口\")]),t._v(\"。\")])])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"加密认证的报文\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"TCP 头部没有经过任何加密和认证，在传输过程中很容易被中间网络设备篡改，注入和窃听。\")]),t._v(\" \"),s(\"li\",[t._v(\"QUIC 中报文都是经过加密和认证的，在传输过程中保证了数据的安全。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"连接迁移\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"TCP 连接是由（源 IP，源端口，目的 IP，目的端口）组成，这四者中一旦有一项发生改变，这个连接也就不能用了。如果我们从 5G 网络切换到 WiFi 网络，IP 地址就会改变，这个时候 TCP 连接也自然断掉了。\")]),t._v(\" \"),s(\"li\",[t._v(\"QUIC 使用客户端生成的 64 位 ID 来表示一条连接，只要 ID 不变，这条连接也就一直维持着，不会中断。\")])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"前向纠错机制\")]),t._v(\" \"),s(\"p\",[t._v(\"QUIC 中发送数据时，除了发送本身的数据包，还会发送验证包，以减少数据丢失导致的重传。\")]),t._v(\" \"),s(\"p\",[t._v(\"例如：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"发送端需要发送三个包，QUIC 在传输时会计算出这三个包的异或值，并单独发出一个校验包，也就是总共发出了四个包。\")]),t._v(\" \"),s(\"li\",[t._v(\"如果某一个包（非校验包）传输时丢失了，则可以通过另外三个包计算出丢失数据包的内容。\")]),t._v(\" \"),s(\"li\",[t._v(\"当然这种技术只能用在丢失一个包的情况下，如果丢失了多个包，就只能进行重传了。\")])])])]),t._v(\" \"),s(\"p\",[t._v(\"可以看出，QUIC 丢掉了 TCP 的包袱，基于 UDP，实现了一个安全高效可靠的 HTTP 通信协议。凭借着 0-RTT 建立连接、传输层多路复用、连接迁移、改进的拥塞控制、流量控制等特性，QUIC 在绝大多数场景下获得了比 HTTP/2 更好的效果，HTTP/3 真是未来可期。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"小结\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结\"}},[t._v(\"#\")]),t._v(\" 小结\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"HTTP/0.9 实现基本请求响应。\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP/1.0 增加 HTTP 头，丰富传输资源类型，奠定互联网发展基础。\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP/1.1 增加持久连接、管线化、响应分块，提升了 HTTP 传输效率。\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP/2 采用二进制传输格式，通过 HTTP 多路复用、头部压缩、服务器端推送，将传输效率在 HTTP + TCP 架构上发挥到了极致。\")]),t._v(\" \"),s(\"li\",[t._v(\"HTTP/3 将传输层替换为 QUIC，通过改进的拥塞控制、流量控制、0-RTT 建连、传输层多路复用、连接迁移等特性，进一步提升了 HTTP 传输效率。\")])]),t._v(\" \"),s(\"p\",[t._v(\"可以看到，从 HTTP/1.1 开始，HTTP 的发展方向就是：不断地提升传输效率。期待未来的 HTTP 能够给我们带来更加快速的传输体验。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"媒体类型（mime）\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#媒体类型（mime）\"}},[t._v(\"#\")]),t._v(\" 媒体类型（MIME）\")]),t._v(\" \"),s(\"p\",[t._v(\"因特网上有数千种不同的数据类型，HTTP 仔细地给每种要通过 Web 传输的对象都打上了名为 MIME 类型(MIME type)的数据格式标签。最初设计 MIME (Multipurpose Internet Mail Extension，多用途因特网邮件扩展)是为了解决在不同 的电子邮件系统之间搬移报文时存在的问题。MIME 在电子邮件系统中工作得非常好，因此 HTTP 也采纳了它，用它来描述并标记多媒体内容。\")]),t._v(\" \"),s(\"p\",[t._v(\"Web 服务器会为所有 HTTP 对象数据附加一个 MIME 类型。当 Web 浏览器从服务器中取回一个对象时，会去查看相关的 MIME 类型，看看它是否知道 应该如何处理这个对象。大多数浏览器都可以处理数百种常见的对象类型:显示图 片文件、解析并格式化 HTML 文件、通过计算机声卡播放音频文件，或者运行外部插件软件来处理特殊格式的数据。\")]),t._v(\" \"),s(\"p\",[t._v(\"![image-20210202144123242](/Users/smallzip/Library/Application Support/typora-user-images/image-20210202144123242.png)\")]),t._v(\" \"),s(\"p\",[t._v(\"上图是与数据内容一同回送的 MIME 类型；\")]),t._v(\" \"),s(\"p\",[t._v(\"MIME 类型是一种文本标记，表示一种主要的对象类型和一个特定的子类型，中间由一条斜杠来分隔。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"p\",[t._v(\"HTML 格式的文本文档由 text/html 类型来标记。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"普通的 ASCII 文本文档由 text/plain 类型来标记。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"JPEG 格式的图片为 image/jpeg 类型。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"GIF 格式的图片为 image/gif 类型。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"Apple 的 QuickTime 电影为 video/quicktime 类型。\")])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"微软的 PowerPoint 演示文件为 application/vnd.ms-powerpoint 类型。\")]),t._v(\" \"),s(\"p\",[t._v(\"常见的 MIME 类型有数百个，实验性或用途有限的 MIME 类型则更多。参加《HTTP权威指南》附录 D 提 供了一个非常完整的 MIME 类型列表。\")])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"udp协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#udp协议\"}},[t._v(\"#\")]),t._v(\" UDP协议\")]),t._v(\" \"),s(\"p\",[t._v(\"udp协议全称用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。\")]),t._v(\" \"),s(\"p\",[t._v(\"udp有一下特点：\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-面向无连接\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-面向无连接\"}},[t._v(\"#\")]),t._v(\" 1. 面向无连接\")]),t._v(\" \"),s(\"p\",[t._v(\"首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。\")]),t._v(\" \"),s(\"p\",[t._v(\"具体来说就是：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了\")]),t._v(\" \"),s(\"li\",[t._v(\"在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"有单播，多播，广播的功能\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#有单播，多播，广播的功能\"}},[t._v(\"#\")]),t._v(\" 有单播，多播，广播的功能\")]),t._v(\" \"),s(\"p\",[t._v(\"udp不仅支持一对一的传输方式，同样是支持一对多，多对多，多对一的方式，也就是说UDP提供了单播，多播，广播的功能。\")]),t._v(\" \"),s(\"p\",[t._v(\"![image-20210202235249187](/Users/smallzip/Library/Application Support/typora-user-images/image-20210202235249187.png)\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"udp广播\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#udp广播\"}},[t._v(\"#\")]),t._v(\" UDP广播\")]),t._v(\" \"),s(\"div\",{staticClass:\"language- extra-class\"},[s(\"pre\",[s(\"code\",[t._v(\"\\t广播UDP与单播UDP的区别就是IP地址不同，广播使用广播地址255.255.255.255，将消息发送到在同一广播网络上的每个主机。值得强调的是：**本地广播信息是不会被路由器转发**。当然这是十分容易理解的，因为如果路由器转发了广播信息，那么势必会引起网络瘫痪。这也是为什么IP协议的设计者故意没有定义互联网范围的广播机制。\\n\")])])]),s(\"p\",[t._v(\"​\\t\\t广播地址通常用于在网络游戏中处于同一本地网络的玩家之间交流状态信息等。\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t\\t其实广播顾名思义，就是想局域网内所有的人说话，\"),s(\"strong\",[t._v(\"但是广播还是要指明接收者的端口号的\")]),t._v(\"，因为不可能接受者的所有端口都来收听广播。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"udp多播\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#udp多播\"}},[t._v(\"#\")]),t._v(\" UDP多播\")]),t._v(\" \"),s(\"p\",[t._v(\"​\\t\\t多播，也称为“组播”，将网络中同一业务类型主机进行了逻辑上的分组，进行数据收发的时候其数据仅仅在同一分组中进行，其他的主机没有加入此分组不能收发对应的数据。\")]),t._v(\" \"),s(\"p\",[t._v(\"在广域网上广播的时候，其中的交换机和路由器只向需要获取数据的主机复制并转发数据。主机可以向路由器请求加入或退出某个组，网络中的路由器和交换机有选择地复制并传输数据，将数据仅仅传输给组内的主机。多播的这种功能，可以一次将数据发送到多个主机，又能保证不影响其他不需要（未加入组）的主机的其他通 信。\")]),t._v(\" \"),s(\"p\",[t._v(\"相对于传统的一对一的单播，多播具有如下的优点：\")]),t._v(\" \"),s(\"p\",[t._v(\"1、具有同种业务的主机加入同一数据流，共享同一通道，节省了带宽和服务器的优点，具有广播的优点而又没有广播所需要的带宽。\")]),t._v(\" \"),s(\"p\",[t._v(\"2、服务器的总带宽不受客户端带宽的限制。由于组播协议由接收者的需求来确定是否进行数据流的转发，所以服务器端的带宽是常量，与客户端的数量无关。\")]),t._v(\" \"),s(\"p\",[t._v(\"3、与单播一样，多播是允许在广域网即Internet上进行传输的，而广播仅仅在同一局域网上才能进行。\")]),t._v(\" \"),s(\"p\",[t._v(\"组播的缺点：\")]),t._v(\" \"),s(\"p\",[t._v(\"1、多播与单播相比没有纠错机制，当发生错误的时候难以弥补，但是可以在应用层来实现此种功能。\")]),t._v(\" \"),s(\"p\",[t._v(\"2、多播的网络支持存在缺陷，需要路由器及网络协议栈的支持。\")]),t._v(\" \"),s(\"p\",[t._v(\"3、多播的应用主要有网上视频、网上会议等。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"udp广播和单播比较\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#udp广播和单播比较\"}},[t._v(\"#\")]),t._v(\" UDP广播和单播比较\")]),t._v(\" \"),s(\"p\",[t._v(\"广播和单播的处理过程是不同的，单播的数据只是收发数据的特定主机进行处理，而广播的数据整个局域网都进行处理。\")]),t._v(\" \"),s(\"p\",[t._v(\"例如在一个以太网上有3个主机，主机的配置如下\")]),t._v(\" \"),s(\"p\",[t._v(\"主机的配置情况：\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"主 机\")]),t._v(\" \"),s(\"th\",[s(\"strong\",[t._v(\"A\")])]),t._v(\" \"),s(\"th\",[s(\"strong\",[t._v(\"B\")])]),t._v(\" \"),s(\"th\",[s(\"strong\",[t._v(\"C\")])])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"IP地址\")]),t._v(\" \"),s(\"td\",[t._v(\"192.168.1.150\")]),t._v(\" \"),s(\"td\",[t._v(\"192.168.1.151\")]),t._v(\" \"),s(\"td\",[t._v(\"192.168.1.158\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"MAC地址\")]),t._v(\" \"),s(\"td\",[t._v(\"00:00:00:00:00:01\")]),t._v(\" \"),s(\"td\",[t._v(\"00:00:00:00:00:02\")]),t._v(\" \"),s(\"td\",[t._v(\"00:00:00:00:00:03\")])])])]),t._v(\" \"),s(\"p\",[t._v(\"​\\t\\t单播流程：主机A向主机B发送UDP数据报，发送的目的IP为192.168.1.151，端口为 80，目的MAC地址为00:00:00:00:00:02。此数据经过UDP层、IP层，到达数据链路层，数据在整个以太网上传播，在此层中其他主机会 判断目的MAC地址。主机C的MAC地址为00:00:00:00:00:03，与目的MAC地址00:00:00:00:00:02不匹配，数据链路层 不会进行处理，直接丢弃此数据。\")]),t._v(\" \"),s(\"p\",[t._v(\"主机B的MAC地址为00:00:00:00:00:02，与目的MAC地址00:00:00:00:00:02一致，此数据会经过IP层、UDP层，到达接收数据的应用程序。\")]),t._v(\" \"),s(\"p\",[t._v(\"广播的流程：主机A向整个网络发送广播数据，发送的目的IP为192.168.1.255，端口为 80，目的MAC地址为FF:FF:FF:FF:FF:FF。此数据经过UDP层、IP层，到达数据链路层，数据在整个以太网上传播，在此层中其他主机会 判断目的MAC地址。由于目的MAC地址为FF:FF:FF:FF:FF:FF，主机C和主机B会忽略MAC地址的比较（当然，如果协议栈不支持广播，则 仍然比较MAC地址），处理接收到的数据。\")]),t._v(\" \"),s(\"p\",[t._v(\"主机B和主机C的处理过程一致，此数据会经过IP层、UDP层，到达接收数据的应用程序。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"udp是面向报文的\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#udp是面向报文的\"}},[t._v(\"#\")]),t._v(\" UDP是面向报文的\")]),t._v(\" \"),s(\"p\",[t._v(\"发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"不可靠性\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#不可靠性\"}},[t._v(\"#\")]),t._v(\" 不可靠性\")]),t._v(\" \"),s(\"p\",[t._v(\"首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。\")]),t._v(\" \"),s(\"p\",[t._v(\"并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。\")]),t._v(\" \"),s(\"p\",[t._v(\"再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/2/24/1691f177ce522344?imageslim\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"从上面的动态图可以得知，UDP只会把想发的数据报文一股脑的丢给对方，并不在意数据有无安全完整到达。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"头部开销小，传输数据报文时很高效\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#头部开销小，传输数据报文时很高效\"}},[t._v(\"#\")]),t._v(\" 头部开销小，传输数据报文时很高效\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/2/24/1691f340e82df2d5?imageslim\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"UDP头部包含了以下几个数据：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"两个十六位的端口号，分别为源端口（可选字段）和目标端口\")]),t._v(\" \"),s(\"li\",[t._v(\"整个数据报文的长度\")]),t._v(\" \"),s(\"li\",[t._v(\"整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误\")])]),t._v(\" \"),s(\"p\",[t._v(\"因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的。\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"tcp\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp\"}},[t._v(\"#\")]),t._v(\" TCP\")]),t._v(\" \"),s(\"p\",[t._v(\"当一台计算机想要与另一台计算机通讯时，两台计算机之间的通信需要畅通且可靠，这样才能保证正确收发数据。例如，当你想查看网页或查看电子邮件时，希望完整且按顺序查看网页，而不丢失任何内容。当你下载文件时，希望获得的是完整的文件，而不仅仅是文件的一部分，因为如果数据丢失或乱序，都不是你希望得到的结果，于是就用到了TCP。\")]),t._v(\" \"),s(\"p\",[t._v(\"TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。TCP 是面向连接的、可靠的流协议。流就是指不间断的数据结构，你可以把它想象成排水管中的水流。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"tcp链接过程\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp链接过程\"}},[t._v(\"#\")]),t._v(\" TCP链接过程\")]),t._v(\" \"),s(\"p\",[t._v(\"TCP链接就是三次握手\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/2/24/1691fa18ef700560?imageslim\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"第一次握手\")])]),t._v(\" \"),s(\"p\",[t._v(\"客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"第二次握手\")])]),t._v(\" \"),s(\"p\",[t._v(\"服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"第三次握手\")])]),t._v(\" \"),s(\"p\",[t._v(\"当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。\")]),t._v(\" \"),s(\"p\",[t._v(\"这里可能大家会有个疑惑：为什么 TCP 建立连接需要三次握手，而不是两次？这是因为这是为了防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/2/24/1691f1390798a9a4?imageslim\",alt:\"img\"}})]),t._v(\" \"),s(\"h3\",{attrs:{id:\"tcp断开链接\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp断开链接\"}},[t._v(\"#\")]),t._v(\" TCP断开链接\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2019/2/24/1691fad9308022c9?imageslim\",alt:\"img\"}})]),t._v(\" \"),s(\"p\",[t._v(\"TCP 是全双工的，在断开连接时两端都需要发送 FIN 和 ACK。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"第一次握手\")])]),t._v(\" \"),s(\"p\",[t._v(\"若客户端 A 认为数据发送完成，则它需要向服务端 B 发送连接释放请求。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"第二次握手\")])]),t._v(\" \"),s(\"p\",[t._v(\"B 收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明 A 到 B 的连接已经释放，不再接收 A 发的数据了。但是因为 TCP 连接是双向的，所以 B 仍旧可以发送数据给 A。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"第三次握手\")])]),t._v(\" \"),s(\"p\",[t._v(\"B 如果此时还有没发完的数据会继续发送，完毕后会向 A 发送连接释放请求，然后 B 便进入 LAST-ACK 状态。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"第四次握手\")])]),t._v(\" \"),s(\"p\",[t._v(\"A 收到释放请求后，向 B 发送确认应答，此时 A 进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有 B 的重发请求的话，就进入 CLOSED 状态。当 B 收到确认应答后，也便进入 CLOSED 状态。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"tcp协议的特点\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp协议的特点\"}},[t._v(\"#\")]),t._v(\" TCP协议的特点\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"面向连接\")])]),t._v(\" \"),s(\"p\",[t._v(\"面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"仅支持单播传输\")])]),t._v(\" \"),s(\"p\",[t._v(\"每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"面向字节流\")])]),t._v(\" \"),s(\"p\",[t._v(\"TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"可靠传输\")])]),t._v(\" \"),s(\"p\",[t._v(\"对于可靠传输，判断丢包，误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"提供拥塞控制\")])]),t._v(\" \"),s(\"p\",[t._v(\"当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"TCP提供全双工通信\")])]),t._v(\" \"),s(\"p\",[t._v(\"TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"tcp和udp比较\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp和udp比较\"}},[t._v(\"#\")]),t._v(\" TCP和UDP比较\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"_1-对比\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-对比\"}},[t._v(\"#\")]),t._v(\" 1.对比\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\"),t._v(\" \"),s(\"th\",[t._v(\"UDP\")]),t._v(\" \"),s(\"th\",[t._v(\"TCP\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"是否连接\")]),t._v(\" \"),s(\"td\",[t._v(\"无连接\")]),t._v(\" \"),s(\"td\",[t._v(\"面向连接\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"是否可靠\")]),t._v(\" \"),s(\"td\",[t._v(\"不可靠传输，不使用流量控制和拥塞控制\")]),t._v(\" \"),s(\"td\",[t._v(\"可靠传输，使用流量控制和拥塞控制\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"连接对象个数\")]),t._v(\" \"),s(\"td\",[t._v(\"支持一对一，一对多，多对一和多对多交互通信\")]),t._v(\" \"),s(\"td\",[t._v(\"只能是一对一通信\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"传输方式\")]),t._v(\" \"),s(\"td\",[t._v(\"面向报文\")]),t._v(\" \"),s(\"td\",[t._v(\"面向字节流\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"首部开销\")]),t._v(\" \"),s(\"td\",[t._v(\"首部开销小，仅8字节\")]),t._v(\" \"),s(\"td\",[t._v(\"首部最小20字节，最大60字节\")])]),t._v(\" \"),s(\"tr\",[s(\"td\",[t._v(\"适用场景\")]),t._v(\" \"),s(\"td\",[t._v(\"适用于实时应用（IP电话、视频会议、直播等）\")]),t._v(\" \"),s(\"td\",[t._v(\"适用于要求可靠传输的应用，例如文件传输\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"小结-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小结-2\"}},[t._v(\"#\")]),t._v(\" 小结\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"TCP向上层提供面向连接的可靠服务 ，UDP向上层提供无连接不可靠服务。\")]),t._v(\" \"),s(\"li\",[t._v(\"虽然 UDP 并没有 TCP 传输来的准确，但是也能在很多实时性要求高的地方有所作为\")]),t._v(\" \"),s(\"li\",[t._v(\"对数据准确性要求高，速度可以相对较慢的，可以选用TCP\")])])])}),[],!1,null,null,null);a.default=_.exports}}]);","extractedComments":[]}