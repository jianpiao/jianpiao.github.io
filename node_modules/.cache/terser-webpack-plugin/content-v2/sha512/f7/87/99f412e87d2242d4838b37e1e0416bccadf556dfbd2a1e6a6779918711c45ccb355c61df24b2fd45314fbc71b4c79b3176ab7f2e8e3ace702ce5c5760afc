{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{342:function(t,a,s){\"use strict\";s.r(a);var v=s(33),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"了解http\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#了解http\"}},[t._v(\"#\")]),t._v(\" 了解HTTP\")]),t._v(\" \"),s(\"h2\",{attrs:{id:\"第1章-了解web以及网络基础\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第1章-了解web以及网络基础\"}},[t._v(\"#\")]),t._v(\" 第1章 了解web以及网络基础\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"使用-http-协议访问-web\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用-http-协议访问-web\"}},[t._v(\"#\")]),t._v(\" 使用 \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 协议访问 \"),s(\"strong\",[t._v(\"Web\")])]),t._v(\" \"),s(\"p\",[t._v(\"你知道当我们在网页浏览器(Web browser)的地址栏中输入 URL时，Web 页面是如何呈现的吗?\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-333c42f467d96b76138427ba5756a976_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"Web 页面当然不能凭空显示出来。根据 Web 浏览器地址栏中指定的 URL，Web 浏览器从 Web 服务器端获取文件资源(resource)等信 息，从而显示出 Web 页面。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-e31127a2c02b9d92bc34565bb0b9cb80_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"Web 使用一种名为 HTTP(HyperText Transfer Protocol，超文本传输协\")]),t._v(\" \"),s(\"p\",[t._v(\"议 1)的协议作为规范，完成从客户端到服务器端等一系列运作流 程。而协议是指规则的约定。可以说，Web 是建立在 HTTP 协议上通 信的。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-的诞生\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-的诞生\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 的诞生\")]),t._v(\" \"),s(\"p\",[t._v(\"在深入学习 HTTP 之前，我们先来介绍一下 HTTP 诞生的背景。了解 背景的同时也能了解当初制定 HTTP 的初衷，这样有助于我们更好地 理解。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"为知识共享而规划-web\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为知识共享而规划-web\"}},[t._v(\"#\")]),t._v(\" 为知识共享而规划 Web\")]),t._v(\" \"),s(\"p\",[t._v(\"1989 年 3 月，互联网还只属于少数人。在这一互联网的黎明期，HTTP 诞生了。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-d5110299fd22098c6b463bf0b96553cf_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"CERN(欧洲核子研究组织)的蒂姆 • 伯纳斯 - 李(Tim BernersLee) 博士提出了一种能让远隔两地的研究者们共享知识的设想。\")]),t._v(\" \"),s(\"p\",[t._v(\"最初设想的基本理念是:借助多文档之间相互关联形成的超文本 (HyperText)，连成可相互参阅的 WWW(World Wide Web，万维 网)。\")]),t._v(\" \"),s(\"p\",[t._v(\"现在已提出了 3 项 WWW 构建技术，分别是:把 SGML(Standard Generalized Markup Language，标准通用标记语言)作为页面的文本标 记语言的 HTML(HyperText Markup Language，超文本标记语言); 作为文档传递协议的 HTTP ;指定文档所在地址的 URL(UniformResource Locator，统一资源定位符)。\")]),t._v(\" \"),s(\"p\",[t._v(\"WWW 这一名称，是 Web 浏览器当年用来浏览超文本的客户端应用程序时的名称。现在则用来表示这一系列的集合，也可简称为 Web。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"驻足不前的-http\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#驻足不前的-http\"}},[t._v(\"#\")]),t._v(\" 驻足不前的  HTTP\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"HTTP/0.9\")])]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 于 1990 年问世。那时的 HTTP 并没有作为正式的标准被建立。 现在的 HTTP 其实含有 HTTP1.0 之前版本的意思，因此被称为 HTTP/0.9。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"HTTP/1.0\")])]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 正式作为标准被公布是在 1996 年的 5 月，版本被命名为 HTTP/1.0，并记载于 RFC1945。虽说是初期标准，但该协议标准至今 仍被广泛使用在服务器端。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"HTTP/1.1\")])]),t._v(\" \"),s(\"p\",[t._v(\"1997 年 1 月公布的 HTTP/1.1 是目前主流的 HTTP 协议版本。当初的 标准是 RFC2068，之后发布的修订版 RFC2616 就是当前的最新版 本。\")]),t._v(\" \"),s(\"p\",[t._v(\"可见，作为 Web 文档传输协议的 HTTP，它的版本几乎没有更新。新 一代 HTTP/2.0 正在制订中，但要达到较高的使用覆盖率，仍需假以 时日。\")]),t._v(\" \"),s(\"p\",[t._v(\"当年 HTTP 协议的出现主要是为了解决文本传输的难题。由于协议本 身非常简单，于是在此基础上设想了很多应用方法并投入了实际使 用。现在 HTTP 协议已经超出了 Web 这个框架的局限，被运用到了 各种场景里。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"网络基础-tcp-ip\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#网络基础-tcp-ip\"}},[t._v(\"#\")]),t._v(\" 网络基础 TCP/IP\")]),t._v(\" \"),s(\"p\",[t._v(\"为了理解 HTTP，我们有必要事先了解一下 TCP/IP 协议族。\")]),t._v(\" \"),s(\"p\",[t._v(\"通常使用的网络(包括互联网)是在 TCP/IP 协议族的基础上运作 的。而 HTTP 属于它内部的一个子集。\")]),t._v(\" \"),s(\"p\",[t._v(\"接下来，我们仅介绍理解 HTTP 所需掌握的 TCP/IP 协议族的概要。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"tcp-ip-协议族\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-ip-协议族\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"TCP/IP\")]),t._v(\" 协议族\")]),t._v(\" \"),s(\"p\",[t._v(\"计算机与网络设备要相互通信，双方就必须基于相同的方法。比如， 如何探测到通信目标、由哪一边先发起通信、使用哪种语言进行通 信、怎样结束通信等规则都需要事先确定。不同的硬件、操作系统之 间的通信，所有的这一切都需要一种规则。而我们就把这种规则称为 协议(protocol)。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-ceedc4fa404f250e36ec4fa432f48077_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为 \"),s(\"strong\",[t._v(\"TCP/IP\")]),t._v(\" 是互联网相关的各类协议族的总称\")])]),t._v(\" \"),s(\"p\",[t._v(\"协议中存在各式各样的内容。从电缆的规格到 IP 地址的选定方法、 寻找异地用户的方法、双方建立通信的顺序，以及 Web 页面显示需 要处理的步骤，等等。\")]),t._v(\" \"),s(\"p\",[t._v(\"像这样把与互联网相关联的协议集合起来总称为 TCP/IP。也有说法 认为，TCP/IP 是指 TCP 和 IP 这两种协议。还有一种说法认为，TCP/ IP 是在 IP 协议的通信过程中，使用到的协议族的统称。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"tcp-ip-的分层管理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-ip-的分层管理\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"TCP/IP\")]),t._v(\" 的分层管理\")]),t._v(\" \"),s(\"p\",[t._v(\"TCP/IP 协议族里重要的一点就是分层。TCP/IP 协议族按层次分别分\")]),t._v(\" \"),s(\"p\",[t._v(\"为以下 4 层:应用层、传输层、网络层和数据链路层。\")]),t._v(\" \"),s(\"p\",[t._v(\"把 TCP/IP 层次化是有好处的。比如，如果互联网只由一个协议统 筹，某个地方需要改变设计时，就必须把所有部分整体替换掉。而分 层之后只需把变动的层替换掉即可。把各层之间的接口部分规划好之 后，每个层次内部的设计就能够自由改动了。\")]),t._v(\" \"),s(\"p\",[t._v(\"值得一提的是，层次化之后，设计也变得相对简单了。处于应用层上 的应用可以只考虑分派给自己的任务，而不需要弄清对方在地球上哪 个地方、对方的传输路线是怎样的、是否能确保传输送达等问题。\")]),t._v(\" \"),s(\"p\",[t._v(\"TCP/IP 协议族各层的作用如下。\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"应用层\")]),t._v(\"：应用层决定了向用户提供应用服务时通信的活动。TCP/IP 协议族内预存了各类通用的应用服务。比如，FTP(File Transfer Protocol，文件传输协议)和 DNS(Domain Name System，域 名系统)服务就是其中两类。HTTP 协议也处于该层。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"传输层\")]),t._v(\"：传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据 传输。在传输层有两个性质不同的议:TCP(Transmission Control Protocol，传输控制协议)和 UDP(User Data Protocol，用户数据报 协议)。\")]),t._v(\" \"),s(\"li\",[t._v(\"**网络层：**网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数 据单位。该层规定了通过怎样的路径(所谓的传输路线)到达对方计 算机，并把数据包传送给对方。与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所 起的作用就是在众多的选项内选择一条传输路\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"链路层\")]),t._v(\"(又名数据链路层，网络接口层)：用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱 动、NIC(Network Interface Card，网络适配器，即网卡)，及光纤等 物理可见部分(还包括连接器等一切传输媒介)。硬件上的范畴均在 链路层的作用范围之内。\")])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"tcp-ip-通信传输流\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#tcp-ip-通信传输流\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"TCP/IP\")]),t._v(\" 通信传输流\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-3240d9089fd4b6af55f75112f4d26c76_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"利用 TCP/IP 协议族进行网络通信时，会通过分层顺序与对方进行通 信。发送端从应用层往下走，接收端则往应用层往上走。\")]),t._v(\" \"),s(\"p\",[t._v(\"我们用 HTTP 举例来说明，首先作为发送端的客户端在应用层 (HTTP 协议)发出一个想看某个 Web 页面的 HTTP 请求。\")]),t._v(\" \"),s(\"p\",[t._v(\"接着，为了传输方便，在传输层(TCP 协议)把从应用层处收到的数 据(HTTP 请求报文)进行分割，并在各个报文上打上标记序号及端 口号后转发给网络层。\")]),t._v(\" \"),s(\"p\",[t._v(\"在网络层(IP 协议)，增加作为通信目的地的 MAC 地址后转发给链 路层。这样一来，发往网络的通信请求就准备齐全了。\")]),t._v(\" \"),s(\"p\",[t._v(\"接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用 层。当传输到应用层，才能算真正接收到由客户端发送过来的 HTTP 请求。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-32637fe0424992588d519362caa20de3_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该 层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层 时会把对应的首部消去。\")]),t._v(\" \"),s(\"p\",[t._v(\"这种把数据信息包装起来的做法称为封装(encapsulate)。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"与-http-关系密切的协议-ip、tcp-和dns\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#与-http-关系密切的协议-ip、tcp-和dns\"}},[t._v(\"#\")]),t._v(\" 与 \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 关系密切的协议 \"),s(\"strong\",[t._v(\": IP\")]),t._v(\"、\"),s(\"strong\",[t._v(\"TCP\")]),t._v(\" 和DNS\")]),t._v(\" \"),s(\"p\",[t._v(\"下面我们分别针对在 TCP/IP 协议族中与 HTTP 密不可分的 3 个协议 (IP、TCP 和 DNS)进行说明。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"负责传输的-ip-协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#负责传输的-ip-协议\"}},[t._v(\"#\")]),t._v(\" 负责传输的 \"),s(\"strong\",[t._v(\"IP\")]),t._v(\" 协议\")]),t._v(\" \"),s(\"p\",[t._v(\"按层次分，IP(Internet Protocol)网际协议位于网络层。Internet Protocol 这个名称可能听起来有点夸张，但事实正是如此，因为几乎 所有使用网络的系统都会用到 IP 协议。TCP/IP 协议族中的 IP 指的就 是网际协议，协议名称中占据了一半位置，其重要性可见一斑。可能 有人会把“IP”和“IP 地址”搞混，“IP”其实是一种协议的名称。\")]),t._v(\" \"),s(\"p\",[t._v(\"IP 协议的作用是把各种数据包传送给对方。而要保证确实传送到对方 那里，则需要满足各类条件。其中两个重要的条件是 IP 地址和 MAC 地址(Media Access Control Address)。\")]),t._v(\" \"),s(\"p\",[t._v(\"IP 地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定 地址。IP 地址可以和 MAC 地址进行配对。IP 地址可变换，但 MAC 地址基本上不会更改。\")]),t._v(\" \"),s(\"p\",[t._v(\"使用 \"),s(\"strong\",[t._v(\"ARP\")]),t._v(\" 协议凭借 \"),s(\"strong\",[t._v(\"MAC\")]),t._v(\" 地址进行通信\")]),t._v(\" \"),s(\"p\",[t._v(\"IP 间的通信依赖 MAC 地址。在网络上，通信的双方在同一局域网 (LAN)内的情况是很少的，通常是经过多台计算机和网络设备中转 才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 ARP 协议(Address Resolution Protocol)。ARP 是一种用以解析地址的协议，根据通信方 的 IP 地址就可以反查出对应的 MAC 地址。\")]),t._v(\" \"),s(\"p\",[t._v(\"没有人能够全面掌握互联网中的传输状况\")]),t._v(\" \"),s(\"p\",[t._v(\"在到达通信目标前的中转过程中，那些计算机和路由器等网络设备只 能获悉很粗略的传输路线。\")]),t._v(\" \"),s(\"p\",[t._v(\"这种机制称为路由选择(routing)，有点像快递公司的送货过程。想 要寄快递的人，只要将自己的货物送到集散中心，就可以知道快递公 司是否肯收件发货，该快递公司的集散中心检查货物的送达地址，明 确下站该送往哪个区域的集散中心。接着，那个区域的集散中心自会 判断是否能送到对方的家中。\")]),t._v(\" \"),s(\"p\",[t._v(\"我们是想通过这个比喻说明，无论哪台计算机、哪台网络设备，它们 都无法全面掌握互联网中的细节。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-2cd84d4ea9000be7aec9369fa3cb4dff_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"h4\",{attrs:{id:\"确保可靠性的-tcp-协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#确保可靠性的-tcp-协议\"}},[t._v(\"#\")]),t._v(\" 确保可靠性的 \"),s(\"strong\",[t._v(\"TCP\")]),t._v(\" 协议\")]),t._v(\" \"),s(\"p\",[t._v(\"按层次分，TCP 位于传输层，提供可靠的字节流服务。\")]),t._v(\" \"),s(\"p\",[t._v(\"所谓的字节流服务(Byte Stream Service)是指，为了方便传输，将大 块数据分割成以报文段(segment)为单位的数据包进行管理。而可 靠的传输服务是指，能够把数据准确可靠地传给对方。一言以蔽之， TCP 协议为了更容易传送大数据才把数据分割，而且 TCP 协议能够 确认数据最终是否送达到对方。\")]),t._v(\" \"),s(\"p\",[t._v(\"确保数据能到达目标\")]),t._v(\" \"),s(\"p\",[t._v(\"为了准确无误地将数据送达目标处，TCP 协议采用了三次握手 (three-way handshaking)策略。用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，它一定会向对方确认是否成功送达。\")]),t._v(\" \"),s(\"p\",[t._v(\"握手过程中使用了 TCP 的标志(flag) —— SYN(synchronize) 和 ACK(acknowledgement)。\")]),t._v(\" \"),s(\"p\",[t._v(\"发送端首先发送一个带 SYN 标志的数据包给对方。接收端收到后， 回传一个带有 SYN/ACK 标志的数据包以示传达确认信息。最后，发 送端再回传一个带 ACK 标志的数据包，代表“握手”结束。\")]),t._v(\" \"),s(\"p\",[t._v(\"若在握手过程中某个阶段莫名中断，TCP 协议会再次以相同的顺序发 送相同的数据包。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-e18b22cde01d5935b5086eda69468155_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"除了上述三次握手，TCP 协议还有其他各种手段来保证通信的可靠 性。\")]),t._v(\" \"),s(\"h4\",{attrs:{id:\"负责域名解析的-dns-服务\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#负责域名解析的-dns-服务\"}},[t._v(\"#\")]),t._v(\" 负责域名解析的 \"),s(\"strong\",[t._v(\"DNS\")]),t._v(\" 服务\")]),t._v(\" \"),s(\"p\",[t._v(\"DNS(Domain Name System)服务是和 HTTP 协议一样位于应用层的\")]),t._v(\" \"),s(\"p\",[t._v(\"协议。它提供域名到 IP 地址之间的解析服务。 计算机既可以被赋予 IP 地址，也可以被赋予主机名和域名。比如\")]),t._v(\" \"),s(\"p\",[t._v(\"www.hackr.jp。\")]),t._v(\" \"),s(\"p\",[t._v(\"用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP 地址访问。因为与 IP 地址的一组纯数字相比，用字母配合数字的表 示形式来指定计算机名更符合人类的记忆习惯。\")]),t._v(\" \"),s(\"p\",[t._v(\"但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅 长处理一长串数字。\")]),t._v(\" \"),s(\"p\",[t._v(\"为了解决上述的问题，DNS 服务应运而生。DNS 协议提供通过域名 查找 IP 地址，或逆向从 IP 地址反查域名的服务。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-f135ab135a4c6e708e6149ada7d7b410_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"h2\",{attrs:{id:\"第2章-简单的http协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第2章-简单的http协议\"}},[t._v(\"#\")]),t._v(\" 第2章 简单的HTTP协议\")]),t._v(\" \"),s(\"p\",[t._v(\"本章将针对 HTTP 协议结构进行讲解，主要使用HTTP/1.1版本。学完这章，想必大家就能理解 HTTP 协议的基础了。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http协议用于客户端和服务器端之间-的通信\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http协议用于客户端和服务器端之间-的通信\"}},[t._v(\"#\")]),t._v(\" HTTP协议用于客户端和服务器端之间 的通信\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议和 TCP/IP 协议族内的其他众多的协议相同，用于客户端和 服务器之间的通信。\")]),t._v(\" \"),s(\"p\",[t._v(\"请求访问文本或图像等一系列资源的一端称为客户端，而提供资源响应的一 端称为服务器端。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-9d0b37824c8153d7bc2755203bdf6367_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"在两台计算机之间使用 HTTP 协议通信时，在一条通信线路上必定有 一端是客户端，另一端则是服务器端。\")]),t._v(\" \"),s(\"p\",[t._v(\"有时候，按实际情况，两台计算机作为客户端和服务器端的角色有可 能会互换。但就仅从一条通信路线来说，服务器端和客户端的角色是 确定的，而用 HTTP 协议能够明确区分哪端是客户端，哪端是服务器 端。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-83d687ce95f3e719acb9ff916921ed20_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返 回。换句话说，肯定是先从客户端开始建立通信的，服务器端在没有 接收到请求之前不会发送响应。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-437c54275145a6422980b8cb2f9a5e92_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"客户端发送请求：\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"index\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"htm \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\n\\nHost\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp\\n\")])])])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"服务器发送响应\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"200\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"OK\")]),t._v(\"\\nData\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"Tue\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10\")]),t._v(\" Jul \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2020\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"06\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"50\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"15\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GMT\")]),t._v(\"\\nCntent\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Length\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"362\")]),t._v(\"\\nContent\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"Type\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"text\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"html\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"html\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n  \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"...\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"客户端\")]),t._v(\"：起始行开头的GET表示请求访问服务器的类型，称为方法 (method)。随后的字符串 /index.htm 指明了请求访问的资源对象， 也叫做请求 URI(request-URI)。最后的 HTTP/1.1，即 HTTP 的版本 号，用来提示客户端使用的 HTTP 协议功能。\")]),t._v(\" \"),s(\"p\",[t._v(\"综合来看，这段请求内容的意思是:请求访问某台 HTTP 服务器上的 /index.htm 页面资源。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"服务器\")]),t._v(\"：在起始行开头的 HTTP/1.1 表示服务器对应的 HTTP 版本。\")]),t._v(\" \"),s(\"p\",[t._v(\"紧挨着的 200 OK 表示请求的处理结果的状态码(status code)和原因 短语(reason-phrase)。下一行显示了创建响应的日期时间，是首部 字段(header field)内的一个属性。\")]),t._v(\" \"),s(\"p\",[t._v(\"接着以一空行分隔，之后的内容称为资源实体的主体(entity body)。\")]),t._v(\" \"),s(\"p\",[t._v(\"响应报文基本上由协议版本、状态码(表示请求成功或失败的数字代 码)、用以解释状态码的原因短语、可选的响应首部字段以及实体主 体构成。稍后我们会对这些内容进行详细说明。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"/**\\n* HTTP/1.1 协议版本\\n* 200      状态码\\n* OK       状态码的原因短语\\n*\\n* 下面为 响应首部字段\\n* Data:Tue,10 Jul 2020 06:50:15 GMT\\n* Cntent.Length:362\\n* Content.Type:text/html\\n*\\n*  下面为 主体\\n*  <html>\\n*  ...\\n*/\")]),t._v(\"\\n\")])])]),s(\"p\",[t._v(\"以上就是响应报文的构成。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http是不保存状态的协议\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http是不保存状态的协议\"}},[t._v(\"#\")]),t._v(\" HTTP是不保存状态的协议\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 是一种不保存状态，即无状态(stateless)协议。HTTP 协议自 身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个 级别，协议对于发送过的请求或响应都不做持久化处理。\")]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"客户端(说：你之前发送了什么给我来着？)\")])]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"服务器(说：我想想，之前发送了什么给你来着？好像，我也不知道哦！)\")])]),t._v(\" \"),s(\"p\",[t._v(\"以上即说明，\"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 协议自身不具备保存之前发送过的请求或响应的功能\")]),t._v(\" \"),s(\"p\",[t._v(\"使用 HTTP 协议，每当有新的请求发送时，就会有对应的新响应产 生。协议本身并不保留之前一切的请求或响应报文的信息。这是为了 更快地处理大量事务，确保协议的可伸缩性，而特意把 HTTP 协议设 计成如此简单的。\")]),t._v(\" \"),s(\"p\",[t._v(\"可是，随着 Web 的不断发展，因无状态而导致业务处理变得棘手的 情况增多了。比如，用户登录到一家购物网站，即使他跳转到该站的其他页面后，也需要能继续保持登录状态。针对这个实例，网站为了 能够掌握是谁送出的请求，需要保存用户的状态。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP/1.1 虽然是无状态协议，但为了实现期望的保持状态功能，于 是引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管 理状态了。有关 Cookie 的详细内容稍后讲解。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"请求uri定位资源\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#请求uri定位资源\"}},[t._v(\"#\")]),t._v(\" 请求URI定位资源\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议使用 URI 定位互联网上的资源。正是因为 URI 的特定功能，在互联网上任意位置的资源都能访问到。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-b7c88e705571339fd7803af55bfb8f98_1440w.png\",alt:\"URI\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为\"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 协议使用 \"),s(\"strong\",[t._v(\"URI\")]),t._v(\" 让客户端定位到资源\")])]),t._v(\" \"),s(\"p\",[t._v(\"当客户端请求访问资源而发送请求时，URI 需要将作为请求报文中的请求 URI 包含在内。指定请求 URI 的方式有很多。比如：\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"URI为完整的请求RUL\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" http\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"index\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"html \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"在首部字段Host中写明网络域名或IP地址\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"index\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"html \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\nHost\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp\\n\")])])])])]),t._v(\" \"),s(\"p\",[t._v(\"除此之外，如果不是访问特定资源而是对服务器本身发起请求，可以 用一个 * 来代替请求 URI。下面这个例子是查询 HTTP 服务器端支持 的 HTTP 方法种类。\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"OPTIONS\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\n\")])])]),s(\"h3\",{attrs:{id:\"告知服务器意图的-http-方法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#告知服务器意图的-http-方法\"}},[t._v(\"#\")]),t._v(\" 告知服务器意图的 \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 方法\")]),t._v(\" \"),s(\"p\",[t._v(\"下面，我们介绍 HTTP/1.1 中可使用的方法。\")]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"GET\")]),t._v(\" :获取资源\")]),t._v(\" \"),s(\"p\",[t._v(\"GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器 端解析后返回响应内容。也就是说，如果请求的资源是文本，那就保 持原样返回;如果是像 CGI(Common Gateway Interface，通用网关接 口)那样的程序，则返回经过执行后的输出结果。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-21804ff65474b5d8bdfe9c73a0315e2c_1440w.png\",alt:\"资源\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"GET /index.html HTTP/1.1\"),s(\"br\"),t._v(\"Host: www.hackr.jp\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"返回index.html的页面资源\")])])])]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"GET /index.html HTTP/1.1\"),s(\"br\"),t._v(\" Host: www.hackr.jp\"),s(\"br\"),t._v(\" If-Modified-Since: Thu, 12 Jul 2012 07:30:00 GMT\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"仅返回2012年7 月12日7 点30分以后更新过的index.html页面资源。如果未 有内容更新，则以状态码304 Not Modified作为响应返回\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"POST\")]),t._v(\":传输实体主体\\nPOST 方法用来传输实体的主体。\")]),t._v(\" \"),s(\"p\",[t._v(\"虽然用 GET 方法也可以传输实体的主体，但一般不用 GET 方法进行 传输，而是用 POST 方法。虽说 POST 的功能与 GET 很相似，但 POST 的主要目的并不是获取响应的主体内容。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-ab182825c3765e5b41a193e71b4196da_1440w.png\",alt:\"post\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"POST /submit.cgi HTTP/1.1\"),s(\"br\"),t._v(\" Host: www.hackr.jp\"),s(\"br\"),t._v(\" Content-Length: 1560(1560字节的数据)\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"返回 submit.cgi 接收数据的处理结果\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"PUT\")]),t._v(\":传输文件\")]),t._v(\" \"),s(\"p\",[t._v(\"PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请\")]),t._v(\" \"),s(\"p\",[t._v(\"求报文的主体中包含文件内容，然后保存到请求 URI 指定的位置。\")]),t._v(\" \"),s(\"p\",[t._v(\"但是，鉴于 HTTP/1.1 的 PUT 方法自身不带验证机制，任何人都可以 上传文件 , 存在安全性问题，因此一般的 Web 网站不使用该方法。若 配合 Web 应用程序的验证机制，或架构设计采用 REST(REpresentational State Transfer，表征状态转移)标准的同类 Web 网站，就可能会开放使用 PUT 方法。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-1756d9bf52549c770ee8cfebe5849fff_1440w.png\",alt:\"put\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"PUT /example.html HTTP/1.1\"),s(\"br\"),t._v(\" Host: www.hackr.jp\"),s(\"br\"),t._v(\" Content-Type: text/html\"),s(\"br\"),t._v(\" Content-Length: 1560(1560 字节的数据)\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"返回 submit.cgi 接收数据的处理结果\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"HEAD\")]),t._v(\":获得报文首部\")]),t._v(\" \"),s(\"p\",[t._v(\"HEAD 方法和 GET 方法一样，只是不返回报文主体部分。用于确认 URI 的有效性及资源更新的日期时间等。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-0b23f0f27e4c963f12dfeb481dd882b8_1440w.png\",alt:\"head\"}})]),t._v(\" \"),s(\"p\",[t._v(\"和 \"),s(\"strong\",[t._v(\"GET\")]),t._v(\" 一样，但不返回报文主体\")]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"HEAD /index.html HTTP/1.1 Host: www.hackr.jp\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"返回index.html有关的响应首部\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"DELETE\")]),t._v(\":删除文件\")]),t._v(\" \"),s(\"p\",[t._v(\"DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按 请求 URI 删除指定的资源。\")]),t._v(\" \"),s(\"p\",[t._v(\"但是，HTTP/1.1 的 DELETE 方法本身和 PUT 方法一样不带验证机 制，所以一般的 Web 网站也不使用 DELETE 方法。当配合 Web 应用 程序的验证机制，或遵守 REST 标准时还是有可能会开放使用的。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic4.zhimg.com/80/v2-2ba157f6fa545f4ee40a5e789b062b27_1440w.png\",alt:\"delete\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"DELETE /example.html HTTP/1.1 Host: www.hackr.jp\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"响应返回状态码 204 No Content(比如 :该 html 已从该服务器上删除)\")])])])]),t._v(\" \"),s(\"p\",[s(\"strong\",[t._v(\"OPTIONS\")]),t._v(\":询问支持的方法\")]),t._v(\" \"),s(\"p\",[t._v(\"OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic1.zhimg.com/80/v2-5cd11c2ebe6d0250ac6233fded546c85_1440w.png\",alt:\"options\"}})]),t._v(\" \"),s(\"table\",[s(\"thead\",[s(\"tr\",[s(\"th\",[t._v(\"请求\")]),t._v(\" \"),s(\"th\",[t._v(\"OPTIONS * HTTP/1.1 Host: www.hackr.jp\")])])]),t._v(\" \"),s(\"tbody\",[s(\"tr\",[s(\"td\",[t._v(\"响应\")]),t._v(\" \"),s(\"td\",[t._v(\"HTTP/1.1 200 OK\"),s(\"br\"),t._v(\" Allow: GET, POST, HEAD, OPTIONS (返回服务器支持的方法)\")])])])]),t._v(\" \"),s(\"h3\",{attrs:{id:\"持久连接节省通信量\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#持久连接节省通信量\"}},[t._v(\"#\")]),t._v(\" 持久连接节省通信量\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP 连接。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-4e30c8a19e1dbd680396eff691cab20c_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"p\",[t._v(\"以当年的通信情况来说，因为都是些容量很小的文本传输，所以即使 这样也没有多大问题。可随着 HTTP 的普及，文档中包含大量图片的 情况多了起来。\")]),t._v(\" \"),s(\"p\",[t._v(\"比如，使用浏览器浏览一个包含多张图片的 HTML 页面时，在发送 请求访问 HTML 页面资源的同时，也会请求该 HTML 页面里包含的 其他资源。因此，每次的请求都会造成无谓的 TCP 连接建立和断 开，增加通信量的开销。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"持久连接\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#持久连接\"}},[t._v(\"#\")]),t._v(\" 持久连接\")]),t._v(\" \"),s(\"p\",[t._v(\"为解决上述 TCP 连接的问题，HTTP/1.1 和一部分的 HTTP/1.0 想出了 持久连接(HTTP Persistent Connections，也称为 HTTP keep-alive 或 HTTP connection reuse)的方法。持久连接的特点是，只要任意一端 没有明确提出断开连接，则保持 TCP 连接状态。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-d74942352520d0e593977d5da42e5ac0_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"持久连接旨在建立 \"),s(\"strong\",[t._v(\"1\")]),t._v(\" 次 \"),s(\"strong\",[t._v(\"TCP\")]),t._v(\" 连接后进行多次请求和响应的交 互\")])]),t._v(\" \"),s(\"p\",[t._v(\"持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额 外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使 HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相 应提高了。\")]),t._v(\" \"),s(\"p\",[t._v(\"在 HTTP/1.1 中，所有的连接默认都是持久连接，但在 HTTP/1.0 内并 未标准化。虽然有一部分服务器通过非标准的手段实现了持久连接， 但服务器端不一定能够支持持久连接。毫无疑问，除了服务器端，客 户端也需要支持持久连接。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"管道化\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#管道化\"}},[t._v(\"#\")]),t._v(\" 管道化\")]),t._v(\" \"),s(\"p\",[t._v(\"持久连接使得多数请求以管道化(pipelining)方式发送成为可能。从 前发送请求后需等待并收到响应，才能发送下一个请求。管道化技术 出现后，不用等待响应亦可直接发送下一个请求。\")]),t._v(\" \"),s(\"p\",[t._v(\"这样就能够做到同时并行发送多个请求，而不需要一个接一个地等待 响应了。即异步请求。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-13a2f759b3b3d18ff7ea730ee5fd807d_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图所示，不需要等待响应，直接发送下一个请求。\")])]),t._v(\" \"),s(\"p\",[t._v(\"比如，当请求一个包含 10 张图片的 HTML Web 页面，与挨个连接相 比，用持久连接可以让请求更快结束。而管道化技术则比持久连接还 要快。请求数越多，时间差就越明显。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"使用-cookie-的状态管理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用-cookie-的状态管理\"}},[t._v(\"#\")]),t._v(\" 使用 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 的状态管理\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 是无状态协议，它不对之前发生过的请求和响应的状态进行管\")]),t._v(\" \"),s(\"p\",[t._v(\"理。也就是说，无法根据之前的状态进行本次的请求处理。\")]),t._v(\" \"),s(\"p\",[t._v(\"假设要求登录认证的 Web 页面本身无法进行状态的管理(不记录已 登录的状态)，那么每次跳转新页面不是要再次登录，就是要在每次 请求报文中附加参数来管理登录状态。\")]),t._v(\" \"),s(\"p\",[t._v(\"不可否认，无状态协议当然也有它的优点。由于不必保存状态，自然 可减少服务器的 CPU 及内存资源的消耗。从另一侧面来说，也正是 因为 HTTP 协议本身是非常简单的，所以才会被应用在各种场景里。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-6684aee3f6227685ed8e276079a36923_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图 如果让服务器管理全部客户端状态则会成为负担\")])]),t._v(\" \"),s(\"p\",[t._v(\"保留无状态协议这个特征的同时又要解决类似的矛盾问题，于是引入 了 Cookie 技术。Cookie 技术通过在请求和响应报文中写入 Cookie 信 息来控制客户端的状态。\")]),t._v(\" \"),s(\"p\",[t._v(\"Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的 首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器 发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出 去。\")]),t._v(\" \"),s(\"p\",[t._v(\"服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一 个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前 的状态信息。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-850e3f92c83049c164c0bd8301790c72_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为 没有 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 信息状态下的请求\")])]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic3.zhimg.com/80/v2-218733622e2bc5e2c75b13eb43e4a8f7_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为 第 \"),s(\"strong\",[t._v(\"2\")]),t._v(\" 次以后(存有 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 信息状态)的请求\")])]),t._v(\" \"),s(\"p\",[t._v(\"上面展示了发生 Cookie 交互的情景，HTTP 请求报文和响应报文的内 容如下。\")]),t._v(\" \"),s(\"ol\",[s(\"li\",[s(\"p\",[t._v(\"请求报文(没有 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 信息的状态)\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"reader\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\nHost\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"*\")]),t._v(\"首部字段内没有Cookie的相关信息\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"响应报文(服务器端生成 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 信息)\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"200\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"OK\")]),t._v(\"\\nDate\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Thu\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"12\")]),t._v(\" Jul \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"2012\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"07\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"12\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"20\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GMT\")]),t._v(\"\\nServer\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" Apache\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"Set\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Cookie\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" sid\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1342077140226724\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" path\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" expires\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"Wed\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"10\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Oct\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"12\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"07\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"12\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"20\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GMT\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\nContent\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),t._v(\"Type\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" text\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"plain\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\" charset\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"UTF\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"-\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"8\")]),t._v(\"\\n\")])])])]),t._v(\" \"),s(\"li\",[s(\"p\",[t._v(\"请求报文(自动发送保存着的 \"),s(\"strong\",[t._v(\"Cookie\")]),t._v(\" 信息)\")]),t._v(\" \"),s(\"div\",{staticClass:\"language-javascript extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-javascript\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"GET\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"image\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token constant\"}},[t._v(\"HTTP\")]),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1.1\")]),t._v(\"\\nHost\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" hackr\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"jp\\nCookie\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" sid\"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),s(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1342077140226724\")]),t._v(\"\\n\")])])])])]),t._v(\" \"),s(\"h2\",{attrs:{id:\"第3章-http报文内的http信息\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第3章-http报文内的http信息\"}},[t._v(\"#\")]),t._v(\" 第3章 HTTP报文内的HTTP信息\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 通信过程包括从客户端发往服务器端的请求及从服务器端返回 客户端的响应。\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"http-报文\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#http-报文\"}},[t._v(\"#\")]),t._v(\" \"),s(\"strong\",[t._v(\"HTTP\")]),t._v(\" 报文\")]),t._v(\" \"),s(\"p\",[t._v(\"用于 HTTP 协议交互的信息被称为 HTTP 报文。请求端(客户端)的 HTTP 报文叫做请求报文，响应端(服务器端)的叫做响应报文。 HTTP 报文本身是由多行数据构成的字符串文 本。\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP 报文大致可分为报文首部和报文主体两块。两者由最初出现的 空行来划分。通常，并不一定要有报文主体。\")]),t._v(\" \"),s(\"p\",[s(\"img\",{attrs:{src:\"https://pic2.zhimg.com/80/v2-da5da5fdaebaafd36e4b86b829e1ccf1_1440w.png\",alt:\"\"}})]),t._v(\" \"),s(\"blockquote\",[s(\"p\",[t._v(\"上图为 HTTP报文的结构\")])])])}),[],!1,null,null,null);a.default=r.exports}}]);","extractedComments":[]}