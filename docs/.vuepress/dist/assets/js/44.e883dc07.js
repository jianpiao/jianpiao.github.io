(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{403:function(t,e,a){"use strict";a.r(e);var s=a(45),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"setstate更新是同步还是异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setstate更新是同步还是异步"}},[t._v("#")]),t._v(" setState更新是同步还是异步")]),t._v(" "),a("p",[t._v("看待这个更新同步或者异步需要看执行环境。")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("setState")]),t._v("只在合成事件和钩子函数中是“异步”的，在原生事件和"),a("code",[t._v("setTimeout")]),t._v(" 中都是同步的。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("setState")]),t._v(" 的“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形成了所谓的“异步”，当然可以通过第二个参数 "),a("code",[t._v("setState(partialState, callback)")]),t._v(" 中的"),a("code",[t._v("callback")]),t._v("拿到更新后的结果。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("setState")]),t._v(" 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次"),a("code",[t._v("setState")]),t._v("，"),a("code",[t._v("setState")]),t._v("的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时"),a("code",[t._v("setState")]),t._v("多个不同的值，在更新时会对其进行合并批量更新。")])])])])}),[],!1,null,null,null);e.default=v.exports}}]);