(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{366:function(t,a,s){"use strict";s.r(a);var e=s(45),i=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git指令学习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git指令学习"}},[t._v("#")]),t._v(" Git指令学习")]),t._v(" "),s("h3",{attrs:{id:"基础指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础指令"}},[t._v("#")]),t._v(" 基础指令")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("查看所有分支")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git branch -a\n")])])])]),t._v(" "),s("li",[s("p",[t._v("查看当前使用分支(结果列表中前面标*号的表示当前使用分支)")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git branch\n")])])])]),t._v(" "),s("li",[s("p",[t._v("切换分支")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git checkout 分支名称\n")])])])]),t._v(" "),s("li",[s("p",[t._v("初始化git")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git init\n")])])])]),t._v(" "),s("li",[s("p",[t._v("提交变更到暂存区")]),t._v(" "),s("blockquote",[s("p",[t._v("这里的差异适用于git 2.0版本以上")])]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git add .    // 暂存所有（新的，修改的，已删除的）文件\n\ngit add -u   //  仅修改和删除文件\n\ngit add -A    // 暂存所有（新的，修改的，已删除的）文件\n")])])])]),t._v(" "),s("li",[s("p",[t._v("添加说明")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git commit -m\n")])])])]),t._v(" "),s("li",[s("p",[t._v("推送到仓库")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git push -u origin dev    // 第一次\n\ngit push    // 第一次连接到远程仓库之后只需要执行push即可\n\ngit push origin dev:master -f    // 本地的dev分支完全覆盖远程仓库master分支，后面的-f代表覆盖\n")])])])])]),t._v(" "),s("h3",{attrs:{id:"git将一个分支的代码完全覆盖另一个分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git将一个分支的代码完全覆盖另一个分支"}},[t._v("#")]),t._v(" git将一个分支的代码完全覆盖另一个分支")]),t._v(" "),s("p",[t._v("自己开发的代码有时候需要和测试环境的代码尽量保持同步，所有每天都要把自己打代码提交一遍，同时让测试环境下的代码保持同步。")]),t._v(" "),s("p",[t._v("自己的代码分支名为dev，测试分支名叫test，需要做如下操作")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("将自己本地dev分支的代码完全覆盖test分支，首先需要切换到test分支")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git checkout test\n")])])])]),t._v(" "),s("li",[s("p",[t._v("之后可以直接把本地的dev分支代码链接到远程测试test分支的代码，")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git reset --hard origin/dev\n")])])])]),t._v(" "),s("li",[s("p",[t._v("执行上面代码后会显示"),s("code",[t._v("HEAD is now at 827333e4 提交到test分支")]),t._v("说明已经提交成了，但是要注意，只是本地分支被改变了，我们可以看到本地的代码已经变更，也可以对现在的代码进行修改操作，修改完成之后，需要将本地dev分支推送到远程test分支，或者强制覆盖")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git push -f\n")])])])])])])}),[],!1,null,null,null);a.default=i.exports}}]);