(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{334:function(t,a,s){"use strict";s.r(a);var e=s(33),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-操作步骤"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-操作步骤"}},[t._v("#")]),t._v(" git-操作步骤")]),t._v(" "),s("h3",{attrs:{id:"注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),s("p",[t._v("代码提交阶段如果code master没有时间，或许不会进行code review则通常不需要在GitLab中发起Merge Requests进行merge，直接自己本地执行git merge即可。")]),t._v(" "),s("h3",{attrs:{id:"分支命名规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支命名规范"}},[t._v("#")]),t._v(" 分支命名规范")]),t._v(" "),s("p",[t._v("开发期间自己拉取一个开发分支，分支的命名规格为：{分支特性}/{分支名称}-{负责人}，举例：feature/dev-smallzip。")]),t._v(" "),s("p",[s("strong",[t._v("分支特性通常有如下几个：")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("特性名称")]),t._v(" "),s("th",[t._v("特性介绍")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("feature")]),t._v(" "),s("td",[t._v("增加新特性")])]),t._v(" "),s("tr",[s("td",[t._v("hotfix")]),t._v(" "),s("td",[t._v("修改bug，特性发布后可能会出现一些bug，从tag/master中切除分支进行修改，后面merger进去")])]),t._v(" "),s("tr",[s("td",[t._v("release")]),t._v(" "),s("td",[t._v("热发布，在正式发布之前做一个预发布测试的分支")])]),t._v(" "),s("tr",[s("td",[t._v("master")]),t._v(" "),s("td",[t._v("主要分支，即正式发布的")])])])]),t._v(" "),s("p",[s("strong",[t._v("分支名称")])]),t._v(" "),s("p",[t._v("分支名称一般按照开发的内容进行一个简单的命名就好，尽量语义化，能够一眼看得懂的。")]),t._v(" "),s("p",[t._v("比如本次要发布一个新的特性，是做一个游戏路线引导的canvas画布，则命名为："),s("code",[t._v("addGamePath")]),t._v("，或者"),s("code",[t._v("addPathCanvas")]),t._v("等等，语义化能简单的理解即可。")]),t._v(" "),s("p",[s("strong",[t._v("负责人")])]),t._v(" "),s("p",[t._v("这个根据自己的英文名称命名即可，可以使用全名，也可以使用艺名。")]),t._v(" "),s("h3",{attrs:{id:"迭代开发"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#迭代开发"}},[t._v("#")]),t._v(" 迭代开发")]),t._v(" "),s("p",[t._v("由于人员不多，更多情况下是自己拉取一个分支，自己进行开发，开发完毕之后进行自测，在自己的分支中测试好自己的代码。提交阶段注意好push之前先pull一边最新的master分支代码，防止代码冲突。")]),t._v(" "),s("h4",{attrs:{id:"开发阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开发阶段"}},[t._v("#")]),t._v(" 开发阶段")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一步 拉取仓库代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://gitcode-url\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二步 基于target/master切出一个本开发分支")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b feature/addGamePath-smallzip\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第三步 开发完毕提交代码前，进行一次代码自检")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("\n")])])]),s("p",[t._v("代码自检是一个非常重要的环节，要确保改动的代码都在自己的可控范围内，尽量做到自己改了那些，都能够知道，当别人问到代码改动了什么的时候能够快速想得到，并清晰的回复。这一步要查看变动的代码是否符合预期的，这个代码diff阶段建议在开发工具中进行可视化预览比对，如vscode的源码管理中是可以进行源码diff的，改动的内容都审阅一边。")]),t._v(" "),s("h4",{attrs:{id:"提交代码阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交代码阶段"}},[t._v("#")]),t._v(" 提交代码阶段")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一步 将所有的代码都添加进暂存区")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第二步 提交代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feat:描述一下做的内容 tapd:需求文档的路径"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第三步 拉取最新的代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第四步 如果有冲突则需要解决，没有冲突可以忽略这一步")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"chore:解决冲突 pull origin master"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第五步 提交代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin feature/addGamePath-smallzip\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第六步 切换到master")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第七步 测试完毕特性代码后合并到预发布/发布环境")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge feature/addGamePath-smallzip\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第八步 推送/发布")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master\n")])])]),s("h4",{attrs:{id:"额外补充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#额外补充"}},[t._v("#")]),t._v(" 额外补充")]),t._v(" "),s("p",[t._v("代码流程code master对于code有严格要求的，可以在GitLab上面发起一个merge requests请求，code master进行CR（code review），CR审阅通过后直接进行merge，没有通过则打回。")])])}),[],!1,null,null,null);a.default=n.exports}}]);